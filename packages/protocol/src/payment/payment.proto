syntax = "proto3";

message Payment { 
  // Amount to be payed out as float
  float amount = 1;

  // The recipient is the public key of worker node
  string recipient = 2;

  // The payment account is the public key of the escrow account holding the funds
  string payment_account = 3;

  // Nonce is a incremental number retrieved from the worker
  uint64 nonce = 4;

  // The signature is the signed payment data by the manager node
  PaymentSignature signature = 5;
}

message PaymentSignature {
    message R8Pair {
      bytes R8_1 = 1;
      bytes R8_2 = 2;
    }

    R8Pair R8 = 1;
    string S = 2;
}

message ProofRequest {
  message PaymentProof {
    PaymentSignature signature = 1;
    float amount = 2;
    uint64 nonce = 3;
    string recipient = 4;
  }

  uint32 batch_size = 1;
  repeated PaymentProof payments = 2;
}

message ProofResponse {
  repeated string pi_a = 1;
  message Matrix {
    repeated string row = 1 [packed = true];
  }
  repeated Matrix pi_b = 2;
  repeated string pi_c = 3;
  string protocol = 4;
  string curve = 5;
}

// RequestNonce is a message to request a nonce from a worker 
message RequestNonce {
  string peerId = 1;
}

// NonceResponse is a message to respond to a nonce request
message NonceResponse {
  uint64 nonce = 1;
}

// PaymentAcknowledgment is a message to acknowledge a payment
message PaymentAcknowledgment {
  uint64 nonce = 1;
  bool success = 2;
}

// PaymentRequest is a message to request a payment from a manager
message PayoutRequest {
  string peerId = 1;
}

message PaymentMessage {
  oneof message {
    Payment payment = 1;
    RequestNonce request_nonce = 2;
    NonceResponse nonce_response = 3;
    PaymentAcknowledgment payment_ack = 4;
    ProofRequest proof_request = 5;
    ProofResponse proof_response = 6;
    PayoutRequest payout_request = 7;
  }
}
