/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { EFFECT_MIGRATION_PROGRAM_ADDRESS } from '../programs';

/** InvalidForeignAddress: Invalid Foreign Address */
export const EFFECT_MIGRATION_ERROR__INVALID_FOREIGN_ADDRESS = 0x1779; // 6009
/** InvalidStakeStartTime: Invalid Stake Start Time */
export const EFFECT_MIGRATION_ERROR__INVALID_STAKE_START_TIME = 0x177a; // 6010

export type EffectMigrationError =
  | typeof EFFECT_MIGRATION_ERROR__INVALID_FOREIGN_ADDRESS
  | typeof EFFECT_MIGRATION_ERROR__INVALID_STAKE_START_TIME;

let effectMigrationErrorMessages:
  | Record<EffectMigrationError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  effectMigrationErrorMessages = {
    [EFFECT_MIGRATION_ERROR__INVALID_FOREIGN_ADDRESS]: `Invalid Foreign Address`,
    [EFFECT_MIGRATION_ERROR__INVALID_STAKE_START_TIME]: `Invalid Stake Start Time`,
  };
}

export function getEffectMigrationErrorMessage(
  code: EffectMigrationError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      effectMigrationErrorMessages as Record<EffectMigrationError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isEffectMigrationError<
  TProgramErrorCode extends EffectMigrationError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    EFFECT_MIGRATION_PROGRAM_ADDRESS,
    code
  );
}
