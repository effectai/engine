/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const MIGRATION_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  129, 168, 118, 35, 238, 212, 16, 172,
]);

export function getMigrationAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MIGRATION_ACCOUNT_DISCRIMINATOR
  );
}

export type MigrationAccount = {
  discriminator: ReadonlyUint8Array;
  foreignAddress: ReadonlyUint8Array;
  stakeStartTime: bigint;
};

export type MigrationAccountArgs = {
  foreignAddress: ReadonlyUint8Array;
  stakeStartTime: number | bigint;
};

export function getMigrationAccountEncoder(): Encoder<MigrationAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'foreignAddress',
        addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()),
      ],
      ['stakeStartTime', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MIGRATION_ACCOUNT_DISCRIMINATOR })
  );
}

export function getMigrationAccountDecoder(): Decoder<MigrationAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'foreignAddress',
      addDecoderSizePrefix(getBytesDecoder(), getU32Decoder()),
    ],
    ['stakeStartTime', getI64Decoder()],
  ]);
}

export function getMigrationAccountCodec(): Codec<
  MigrationAccountArgs,
  MigrationAccount
> {
  return combineCodec(
    getMigrationAccountEncoder(),
    getMigrationAccountDecoder()
  );
}

export function decodeMigrationAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MigrationAccount, TAddress>;
export function decodeMigrationAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MigrationAccount, TAddress>;
export function decodeMigrationAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<MigrationAccount, TAddress>
  | MaybeAccount<MigrationAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMigrationAccountDecoder()
  );
}

export async function fetchMigrationAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MigrationAccount, TAddress>> {
  const maybeAccount = await fetchMaybeMigrationAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMigrationAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MigrationAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMigrationAccount(maybeAccount);
}

export async function fetchAllMigrationAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MigrationAccount>[]> {
  const maybeAccounts = await fetchAllMaybeMigrationAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMigrationAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MigrationAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeMigrationAccount(maybeAccount)
  );
}
