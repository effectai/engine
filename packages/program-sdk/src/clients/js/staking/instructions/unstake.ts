/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { EFFECT_STAKING_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UNSTAKE_DISCRIMINATOR = new Uint8Array([
  90, 95, 107, 42, 205, 124, 50, 225,
]);

export function getUnstakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(UNSTAKE_DISCRIMINATOR);
}

export type UnstakeInstruction<
  TProgram extends string = typeof EFFECT_STAKING_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountStakeAccount extends string | IAccountMeta<string> = string,
  TAccountStakeVaultTokenAccount extends string | IAccountMeta<string> = string,
  TAccountRewardAccount extends string | IAccountMeta<string> = string,
  TAccountVestingAccount extends string | IAccountMeta<string> = string,
  TAccountVestingVaultTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountRecipientTokenAccount extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRewardProgram extends
    | string
    | IAccountMeta<string> = 'effRBsQPi2Exq4NWN6SPiCQk4E6BvXkqiBeu6saMxoi',
  TAccountVestingProgram extends
    | string
    | IAccountMeta<string> = 'effV6X5UGwHDjVxAMW1KjC4SsuEQT3dTkm8PQTMGV7S',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountMint extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountStakeVaultTokenAccount extends string
        ? WritableAccount<TAccountStakeVaultTokenAccount>
        : TAccountStakeVaultTokenAccount,
      TAccountRewardAccount extends string
        ? ReadonlyAccount<TAccountRewardAccount>
        : TAccountRewardAccount,
      TAccountVestingAccount extends string
        ? WritableSignerAccount<TAccountVestingAccount> &
            IAccountSignerMeta<TAccountVestingAccount>
        : TAccountVestingAccount,
      TAccountVestingVaultTokenAccount extends string
        ? WritableAccount<TAccountVestingVaultTokenAccount>
        : TAccountVestingVaultTokenAccount,
      TAccountRecipientTokenAccount extends string
        ? WritableAccount<TAccountRecipientTokenAccount>
        : TAccountRecipientTokenAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRewardProgram extends string
        ? ReadonlyAccount<TAccountRewardProgram>
        : TAccountRewardProgram,
      TAccountVestingProgram extends string
        ? ReadonlyAccount<TAccountVestingProgram>
        : TAccountVestingProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      ...TRemainingAccounts,
    ]
  >;

export type UnstakeInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type UnstakeInstructionDataArgs = { amount: number | bigint };

export function getUnstakeInstructionDataEncoder(): Encoder<UnstakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: UNSTAKE_DISCRIMINATOR })
  );
}

export function getUnstakeInstructionDataDecoder(): Decoder<UnstakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getUnstakeInstructionDataCodec(): Codec<
  UnstakeInstructionDataArgs,
  UnstakeInstructionData
> {
  return combineCodec(
    getUnstakeInstructionDataEncoder(),
    getUnstakeInstructionDataDecoder()
  );
}

export type UnstakeAsyncInput<
  TAccountAuthority extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountStakeVaultTokenAccount extends string = string,
  TAccountRewardAccount extends string = string,
  TAccountVestingAccount extends string = string,
  TAccountVestingVaultTokenAccount extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRewardProgram extends string = string,
  TAccountVestingProgram extends string = string,
  TAccountRent extends string = string,
  TAccountMint extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  stakeAccount: Address<TAccountStakeAccount>;
  stakeVaultTokenAccount?: Address<TAccountStakeVaultTokenAccount>;
  rewardAccount?: Address<TAccountRewardAccount>;
  vestingAccount: TransactionSigner<TAccountVestingAccount>;
  vestingVaultTokenAccount?: Address<TAccountVestingVaultTokenAccount>;
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rewardProgram?: Address<TAccountRewardProgram>;
  vestingProgram?: Address<TAccountVestingProgram>;
  rent?: Address<TAccountRent>;
  mint: Address<TAccountMint>;
  amount: UnstakeInstructionDataArgs['amount'];
};

export async function getUnstakeInstructionAsync<
  TAccountAuthority extends string,
  TAccountStakeAccount extends string,
  TAccountStakeVaultTokenAccount extends string,
  TAccountRewardAccount extends string,
  TAccountVestingAccount extends string,
  TAccountVestingVaultTokenAccount extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRewardProgram extends string,
  TAccountVestingProgram extends string,
  TAccountRent extends string,
  TAccountMint extends string,
  TProgramAddress extends Address = typeof EFFECT_STAKING_PROGRAM_ADDRESS,
>(
  input: UnstakeAsyncInput<
    TAccountAuthority,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountRewardAccount,
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRewardProgram,
    TAccountVestingProgram,
    TAccountRent,
    TAccountMint
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UnstakeInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountRewardAccount,
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRewardProgram,
    TAccountVestingProgram,
    TAccountRent,
    TAccountMint
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_STAKING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    stakeVaultTokenAccount: {
      value: input.stakeVaultTokenAccount ?? null,
      isWritable: true,
    },
    rewardAccount: { value: input.rewardAccount ?? null, isWritable: false },
    vestingAccount: { value: input.vestingAccount ?? null, isWritable: true },
    vestingVaultTokenAccount: {
      value: input.vestingVaultTokenAccount ?? null,
      isWritable: true,
    },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rewardProgram: { value: input.rewardProgram ?? null, isWritable: false },
    vestingProgram: { value: input.vestingProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.stakeVaultTokenAccount.value) {
    accounts.stakeVaultTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakeAccount.value)),
      ],
    });
  }
  if (!accounts.rewardAccount.value) {
    accounts.rewardAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakeAccount.value)),
      ],
    });
  }
  if (!accounts.vestingVaultTokenAccount.value) {
    accounts.vestingVaultTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.vestingAccount.value)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rewardProgram.value) {
    accounts.rewardProgram.value =
      'effRBsQPi2Exq4NWN6SPiCQk4E6BvXkqiBeu6saMxoi' as Address<'effRBsQPi2Exq4NWN6SPiCQk4E6BvXkqiBeu6saMxoi'>;
  }
  if (!accounts.vestingProgram.value) {
    accounts.vestingProgram.value =
      'effV6X5UGwHDjVxAMW1KjC4SsuEQT3dTkm8PQTMGV7S' as Address<'effV6X5UGwHDjVxAMW1KjC4SsuEQT3dTkm8PQTMGV7S'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.stakeVaultTokenAccount),
      getAccountMeta(accounts.rewardAccount),
      getAccountMeta(accounts.vestingAccount),
      getAccountMeta(accounts.vestingVaultTokenAccount),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rewardProgram),
      getAccountMeta(accounts.vestingProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.mint),
    ],
    programAddress,
    data: getUnstakeInstructionDataEncoder().encode(
      args as UnstakeInstructionDataArgs
    ),
  } as UnstakeInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountRewardAccount,
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRewardProgram,
    TAccountVestingProgram,
    TAccountRent,
    TAccountMint
  >;

  return instruction;
}

export type UnstakeInput<
  TAccountAuthority extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountStakeVaultTokenAccount extends string = string,
  TAccountRewardAccount extends string = string,
  TAccountVestingAccount extends string = string,
  TAccountVestingVaultTokenAccount extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRewardProgram extends string = string,
  TAccountVestingProgram extends string = string,
  TAccountRent extends string = string,
  TAccountMint extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  stakeAccount: Address<TAccountStakeAccount>;
  stakeVaultTokenAccount: Address<TAccountStakeVaultTokenAccount>;
  rewardAccount: Address<TAccountRewardAccount>;
  vestingAccount: TransactionSigner<TAccountVestingAccount>;
  vestingVaultTokenAccount: Address<TAccountVestingVaultTokenAccount>;
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rewardProgram?: Address<TAccountRewardProgram>;
  vestingProgram?: Address<TAccountVestingProgram>;
  rent?: Address<TAccountRent>;
  mint: Address<TAccountMint>;
  amount: UnstakeInstructionDataArgs['amount'];
};

export function getUnstakeInstruction<
  TAccountAuthority extends string,
  TAccountStakeAccount extends string,
  TAccountStakeVaultTokenAccount extends string,
  TAccountRewardAccount extends string,
  TAccountVestingAccount extends string,
  TAccountVestingVaultTokenAccount extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRewardProgram extends string,
  TAccountVestingProgram extends string,
  TAccountRent extends string,
  TAccountMint extends string,
  TProgramAddress extends Address = typeof EFFECT_STAKING_PROGRAM_ADDRESS,
>(
  input: UnstakeInput<
    TAccountAuthority,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountRewardAccount,
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRewardProgram,
    TAccountVestingProgram,
    TAccountRent,
    TAccountMint
  >,
  config?: { programAddress?: TProgramAddress }
): UnstakeInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountStakeAccount,
  TAccountStakeVaultTokenAccount,
  TAccountRewardAccount,
  TAccountVestingAccount,
  TAccountVestingVaultTokenAccount,
  TAccountRecipientTokenAccount,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRewardProgram,
  TAccountVestingProgram,
  TAccountRent,
  TAccountMint
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_STAKING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    stakeVaultTokenAccount: {
      value: input.stakeVaultTokenAccount ?? null,
      isWritable: true,
    },
    rewardAccount: { value: input.rewardAccount ?? null, isWritable: false },
    vestingAccount: { value: input.vestingAccount ?? null, isWritable: true },
    vestingVaultTokenAccount: {
      value: input.vestingVaultTokenAccount ?? null,
      isWritable: true,
    },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rewardProgram: { value: input.rewardProgram ?? null, isWritable: false },
    vestingProgram: { value: input.vestingProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rewardProgram.value) {
    accounts.rewardProgram.value =
      'effRBsQPi2Exq4NWN6SPiCQk4E6BvXkqiBeu6saMxoi' as Address<'effRBsQPi2Exq4NWN6SPiCQk4E6BvXkqiBeu6saMxoi'>;
  }
  if (!accounts.vestingProgram.value) {
    accounts.vestingProgram.value =
      'effV6X5UGwHDjVxAMW1KjC4SsuEQT3dTkm8PQTMGV7S' as Address<'effV6X5UGwHDjVxAMW1KjC4SsuEQT3dTkm8PQTMGV7S'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.stakeVaultTokenAccount),
      getAccountMeta(accounts.rewardAccount),
      getAccountMeta(accounts.vestingAccount),
      getAccountMeta(accounts.vestingVaultTokenAccount),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rewardProgram),
      getAccountMeta(accounts.vestingProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.mint),
    ],
    programAddress,
    data: getUnstakeInstructionDataEncoder().encode(
      args as UnstakeInstructionDataArgs
    ),
  } as UnstakeInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountRewardAccount,
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRewardProgram,
    TAccountVestingProgram,
    TAccountRent,
    TAccountMint
  >;

  return instruction;
}

export type ParsedUnstakeInstruction<
  TProgram extends string = typeof EFFECT_STAKING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    stakeAccount: TAccountMetas[1];
    stakeVaultTokenAccount: TAccountMetas[2];
    rewardAccount: TAccountMetas[3];
    vestingAccount: TAccountMetas[4];
    vestingVaultTokenAccount: TAccountMetas[5];
    recipientTokenAccount: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    rewardProgram: TAccountMetas[9];
    vestingProgram: TAccountMetas[10];
    rent: TAccountMetas[11];
    mint: TAccountMetas[12];
  };
  data: UnstakeInstructionData;
};

export function parseUnstakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUnstakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      stakeAccount: getNextAccount(),
      stakeVaultTokenAccount: getNextAccount(),
      rewardAccount: getNextAccount(),
      vestingAccount: getNextAccount(),
      vestingVaultTokenAccount: getNextAccount(),
      recipientTokenAccount: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rewardProgram: getNextAccount(),
      vestingProgram: getNextAccount(),
      rent: getNextAccount(),
      mint: getNextAccount(),
    },
    data: getUnstakeInstructionDataDecoder().decode(instruction.data),
  };
}
