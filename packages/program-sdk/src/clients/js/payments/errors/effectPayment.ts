/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { EFFECT_PAYMENT_PROGRAM_ADDRESS } from '../programs';

/** Unauthorized: Unauthorized. */
export const EFFECT_PAYMENT_ERROR__UNAUTHORIZED = 0x1770; // 6000
/** SigVerificationFailed: Signature verification failed. */
export const EFFECT_PAYMENT_ERROR__SIG_VERIFICATION_FAILED = 0x1771; // 6001
/** InvalidProof: Invalid Proof */
export const EFFECT_PAYMENT_ERROR__INVALID_PROOF = 0x1772; // 6002
/** InvalidPayment: Invalid Payment */
export const EFFECT_PAYMENT_ERROR__INVALID_PAYMENT = 0x1773; // 6003
/** InvalidPDA: Invalid PDA */
export const EFFECT_PAYMENT_ERROR__INVALID_P_D_A = 0x1774; // 6004

export type EffectPaymentError =
  | typeof EFFECT_PAYMENT_ERROR__INVALID_PAYMENT
  | typeof EFFECT_PAYMENT_ERROR__INVALID_P_D_A
  | typeof EFFECT_PAYMENT_ERROR__INVALID_PROOF
  | typeof EFFECT_PAYMENT_ERROR__SIG_VERIFICATION_FAILED
  | typeof EFFECT_PAYMENT_ERROR__UNAUTHORIZED;

let effectPaymentErrorMessages: Record<EffectPaymentError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  effectPaymentErrorMessages = {
    [EFFECT_PAYMENT_ERROR__INVALID_PAYMENT]: `Invalid Payment`,
    [EFFECT_PAYMENT_ERROR__INVALID_P_D_A]: `Invalid PDA`,
    [EFFECT_PAYMENT_ERROR__INVALID_PROOF]: `Invalid Proof`,
    [EFFECT_PAYMENT_ERROR__SIG_VERIFICATION_FAILED]: `Signature verification failed.`,
    [EFFECT_PAYMENT_ERROR__UNAUTHORIZED]: `Unauthorized.`,
  };
}

export function getEffectPaymentErrorMessage(code: EffectPaymentError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (effectPaymentErrorMessages as Record<EffectPaymentError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isEffectPaymentError<
  TProgramErrorCode extends EffectPaymentError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    EFFECT_PAYMENT_PROGRAM_ADDRESS,
    code
  );
}
