/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { EFFECT_PAYMENT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_DISCRIMINATOR = new Uint8Array([
  62, 198, 214, 193, 213, 159, 108, 210,
]);

export function getClaimDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLAIM_DISCRIMINATOR);
}

export type ClaimInstruction<
  TProgram extends string = typeof EFFECT_PAYMENT_PROGRAM_ADDRESS,
  TAccountPaymentAccount extends string | IAccountMeta<string> = string,
  TAccountPaymentVaultTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountRecipientTokenAccount extends string | IAccountMeta<string> = string,
  TAccountRecipientManagerDataAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPaymentAccount extends string
        ? ReadonlyAccount<TAccountPaymentAccount>
        : TAccountPaymentAccount,
      TAccountPaymentVaultTokenAccount extends string
        ? WritableAccount<TAccountPaymentVaultTokenAccount>
        : TAccountPaymentVaultTokenAccount,
      TAccountRecipientTokenAccount extends string
        ? WritableAccount<TAccountRecipientTokenAccount>
        : TAccountRecipientTokenAccount,
      TAccountRecipientManagerDataAccount extends string
        ? WritableAccount<TAccountRecipientManagerDataAccount>
        : TAccountRecipientManagerDataAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimInstructionData = {
  discriminator: ReadonlyUint8Array;
  minNonce: number;
  maxNonce: number;
  totalAmount: bigint;
  pubX: ReadonlyUint8Array;
  pubY: ReadonlyUint8Array;
  proof: ReadonlyUint8Array;
};

export type ClaimInstructionDataArgs = {
  minNonce: number;
  maxNonce: number;
  totalAmount: number | bigint;
  pubX: ReadonlyUint8Array;
  pubY: ReadonlyUint8Array;
  proof: ReadonlyUint8Array;
};

export function getClaimInstructionDataEncoder(): Encoder<ClaimInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['minNonce', getU32Encoder()],
      ['maxNonce', getU32Encoder()],
      ['totalAmount', getU64Encoder()],
      ['pubX', fixEncoderSize(getBytesEncoder(), 32)],
      ['pubY', fixEncoderSize(getBytesEncoder(), 32)],
      ['proof', fixEncoderSize(getBytesEncoder(), 256)],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_DISCRIMINATOR })
  );
}

export function getClaimInstructionDataDecoder(): Decoder<ClaimInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['minNonce', getU32Decoder()],
    ['maxNonce', getU32Decoder()],
    ['totalAmount', getU64Decoder()],
    ['pubX', fixDecoderSize(getBytesDecoder(), 32)],
    ['pubY', fixDecoderSize(getBytesDecoder(), 32)],
    ['proof', fixDecoderSize(getBytesDecoder(), 256)],
  ]);
}

export function getClaimInstructionDataCodec(): Codec<
  ClaimInstructionDataArgs,
  ClaimInstructionData
> {
  return combineCodec(
    getClaimInstructionDataEncoder(),
    getClaimInstructionDataDecoder()
  );
}

export type ClaimAsyncInput<
  TAccountPaymentAccount extends string = string,
  TAccountPaymentVaultTokenAccount extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountRecipientManagerDataAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMint extends string = string,
  TAccountAuthority extends string = string,
> = {
  paymentAccount: Address<TAccountPaymentAccount>;
  paymentVaultTokenAccount?: Address<TAccountPaymentVaultTokenAccount>;
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  recipientManagerDataAccount: Address<TAccountRecipientManagerDataAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  mint: Address<TAccountMint>;
  authority: TransactionSigner<TAccountAuthority>;
  minNonce: ClaimInstructionDataArgs['minNonce'];
  maxNonce: ClaimInstructionDataArgs['maxNonce'];
  totalAmount: ClaimInstructionDataArgs['totalAmount'];
  pubX: ClaimInstructionDataArgs['pubX'];
  pubY: ClaimInstructionDataArgs['pubY'];
  proof: ClaimInstructionDataArgs['proof'];
};

export async function getClaimInstructionAsync<
  TAccountPaymentAccount extends string,
  TAccountPaymentVaultTokenAccount extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountRecipientManagerDataAccount extends string,
  TAccountTokenProgram extends string,
  TAccountMint extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof EFFECT_PAYMENT_PROGRAM_ADDRESS,
>(
  input: ClaimAsyncInput<
    TAccountPaymentAccount,
    TAccountPaymentVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipientManagerDataAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimInstruction<
    TProgramAddress,
    TAccountPaymentAccount,
    TAccountPaymentVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipientManagerDataAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountAuthority
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_PAYMENT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    paymentAccount: { value: input.paymentAccount ?? null, isWritable: false },
    paymentVaultTokenAccount: {
      value: input.paymentVaultTokenAccount ?? null,
      isWritable: true,
    },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    recipientManagerDataAccount: {
      value: input.recipientManagerDataAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.paymentVaultTokenAccount.value) {
    accounts.paymentVaultTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.paymentAccount.value)
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.paymentAccount),
      getAccountMeta(accounts.paymentVaultTokenAccount),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.recipientManagerDataAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getClaimInstructionDataEncoder().encode(
      args as ClaimInstructionDataArgs
    ),
  } as ClaimInstruction<
    TProgramAddress,
    TAccountPaymentAccount,
    TAccountPaymentVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipientManagerDataAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountAuthority
  >;

  return instruction;
}

export type ClaimInput<
  TAccountPaymentAccount extends string = string,
  TAccountPaymentVaultTokenAccount extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountRecipientManagerDataAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMint extends string = string,
  TAccountAuthority extends string = string,
> = {
  paymentAccount: Address<TAccountPaymentAccount>;
  paymentVaultTokenAccount: Address<TAccountPaymentVaultTokenAccount>;
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  recipientManagerDataAccount: Address<TAccountRecipientManagerDataAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  mint: Address<TAccountMint>;
  authority: TransactionSigner<TAccountAuthority>;
  minNonce: ClaimInstructionDataArgs['minNonce'];
  maxNonce: ClaimInstructionDataArgs['maxNonce'];
  totalAmount: ClaimInstructionDataArgs['totalAmount'];
  pubX: ClaimInstructionDataArgs['pubX'];
  pubY: ClaimInstructionDataArgs['pubY'];
  proof: ClaimInstructionDataArgs['proof'];
};

export function getClaimInstruction<
  TAccountPaymentAccount extends string,
  TAccountPaymentVaultTokenAccount extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountRecipientManagerDataAccount extends string,
  TAccountTokenProgram extends string,
  TAccountMint extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof EFFECT_PAYMENT_PROGRAM_ADDRESS,
>(
  input: ClaimInput<
    TAccountPaymentAccount,
    TAccountPaymentVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipientManagerDataAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimInstruction<
  TProgramAddress,
  TAccountPaymentAccount,
  TAccountPaymentVaultTokenAccount,
  TAccountRecipientTokenAccount,
  TAccountRecipientManagerDataAccount,
  TAccountTokenProgram,
  TAccountMint,
  TAccountAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_PAYMENT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    paymentAccount: { value: input.paymentAccount ?? null, isWritable: false },
    paymentVaultTokenAccount: {
      value: input.paymentVaultTokenAccount ?? null,
      isWritable: true,
    },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    recipientManagerDataAccount: {
      value: input.recipientManagerDataAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.paymentAccount),
      getAccountMeta(accounts.paymentVaultTokenAccount),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.recipientManagerDataAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getClaimInstructionDataEncoder().encode(
      args as ClaimInstructionDataArgs
    ),
  } as ClaimInstruction<
    TProgramAddress,
    TAccountPaymentAccount,
    TAccountPaymentVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipientManagerDataAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedClaimInstruction<
  TProgram extends string = typeof EFFECT_PAYMENT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    paymentAccount: TAccountMetas[0];
    paymentVaultTokenAccount: TAccountMetas[1];
    recipientTokenAccount: TAccountMetas[2];
    recipientManagerDataAccount: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
    mint: TAccountMetas[5];
    authority: TAccountMetas[6];
  };
  data: ClaimInstructionData;
};

export function parseClaimInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      paymentAccount: getNextAccount(),
      paymentVaultTokenAccount: getNextAccount(),
      recipientTokenAccount: getNextAccount(),
      recipientManagerDataAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      mint: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getClaimInstructionDataDecoder().decode(instruction.data),
  };
}
