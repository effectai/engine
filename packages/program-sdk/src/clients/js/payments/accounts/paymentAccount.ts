/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const PAYMENT_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  47, 239, 218, 78, 43, 193, 1, 61,
]);

export function getPaymentAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PAYMENT_ACCOUNT_DISCRIMINATOR
  );
}

export type PaymentAccount = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
  mint: Address;
  tokenAccount: Address;
  authorities: Array<Address>;
};

export type PaymentAccountArgs = {
  owner: Address;
  mint: Address;
  tokenAccount: Address;
  authorities: Array<Address>;
};

export function getPaymentAccountEncoder(): Encoder<PaymentAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['mint', getAddressEncoder()],
      ['tokenAccount', getAddressEncoder()],
      ['authorities', getArrayEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: PAYMENT_ACCOUNT_DISCRIMINATOR })
  );
}

export function getPaymentAccountDecoder(): Decoder<PaymentAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['mint', getAddressDecoder()],
    ['tokenAccount', getAddressDecoder()],
    ['authorities', getArrayDecoder(getAddressDecoder())],
  ]);
}

export function getPaymentAccountCodec(): Codec<
  PaymentAccountArgs,
  PaymentAccount
> {
  return combineCodec(getPaymentAccountEncoder(), getPaymentAccountDecoder());
}

export function decodePaymentAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PaymentAccount, TAddress>;
export function decodePaymentAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PaymentAccount, TAddress>;
export function decodePaymentAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<PaymentAccount, TAddress> | MaybeAccount<PaymentAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPaymentAccountDecoder()
  );
}

export async function fetchPaymentAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PaymentAccount, TAddress>> {
  const maybeAccount = await fetchMaybePaymentAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePaymentAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PaymentAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePaymentAccount(maybeAccount);
}

export async function fetchAllPaymentAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PaymentAccount>[]> {
  const maybeAccounts = await fetchAllMaybePaymentAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePaymentAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PaymentAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodePaymentAccount(maybeAccount)
  );
}
