/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type ProofData = {
  minNonce: number;
  maxNonce: number;
  totalAmount: number;
  proof: ReadonlyUint8Array;
};

export type ProofDataArgs = ProofData;

export function getProofDataEncoder(): Encoder<ProofDataArgs> {
  return getStructEncoder([
    ['minNonce', getU32Encoder()],
    ['maxNonce', getU32Encoder()],
    ['totalAmount', getU32Encoder()],
    ['proof', fixEncoderSize(getBytesEncoder(), 256)],
  ]);
}

export function getProofDataDecoder(): Decoder<ProofData> {
  return getStructDecoder([
    ['minNonce', getU32Decoder()],
    ['maxNonce', getU32Decoder()],
    ['totalAmount', getU32Decoder()],
    ['proof', fixDecoderSize(getBytesDecoder(), 256)],
  ]);
}

export function getProofDataCodec(): Codec<ProofDataArgs, ProofData> {
  return combineCodec(getProofDataEncoder(), getProofDataDecoder());
}
