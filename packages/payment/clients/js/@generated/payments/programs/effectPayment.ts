/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedClaimProofsInstruction,
  type ParsedCreatePaymentPoolInstruction,
  type ParsedInitInstruction,
} from '../instructions';

export const EFFECT_PAYMENT_PROGRAM_ADDRESS =
  'effphQKcAYeN6CkbygjnJUsuYXGUtkikSPZ6B8hSggC' as Address<'effphQKcAYeN6CkbygjnJUsuYXGUtkikSPZ6B8hSggC'>;

export enum EffectPaymentAccount {
  PaymentAccount,
  RecipientManagerDataAccount,
}

export function identifyEffectPaymentAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EffectPaymentAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([47, 239, 218, 78, 43, 193, 1, 61])
      ),
      0
    )
  ) {
    return EffectPaymentAccount.PaymentAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([61, 41, 126, 131, 94, 55, 133, 237])
      ),
      0
    )
  ) {
    return EffectPaymentAccount.RecipientManagerDataAccount;
  }
  throw new Error(
    'The provided account could not be identified as a effectPayment account.'
  );
}

export enum EffectPaymentInstruction {
  ClaimProofs,
  CreatePaymentPool,
  Init,
}

export function identifyEffectPaymentInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EffectPaymentInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([83, 214, 0, 81, 196, 54, 192, 8])
      ),
      0
    )
  ) {
    return EffectPaymentInstruction.ClaimProofs;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([39, 242, 23, 233, 229, 198, 28, 204])
      ),
      0
    )
  ) {
    return EffectPaymentInstruction.CreatePaymentPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([220, 59, 207, 236, 108, 250, 47, 100])
      ),
      0
    )
  ) {
    return EffectPaymentInstruction.Init;
  }
  throw new Error(
    'The provided instruction could not be identified as a effectPayment instruction.'
  );
}

export type ParsedEffectPaymentInstruction<
  TProgram extends string = 'effphQKcAYeN6CkbygjnJUsuYXGUtkikSPZ6B8hSggC',
> =
  | ({
      instructionType: EffectPaymentInstruction.ClaimProofs;
    } & ParsedClaimProofsInstruction<TProgram>)
  | ({
      instructionType: EffectPaymentInstruction.CreatePaymentPool;
    } & ParsedCreatePaymentPoolInstruction<TProgram>)
  | ({
      instructionType: EffectPaymentInstruction.Init;
    } & ParsedInitInstruction<TProgram>);
