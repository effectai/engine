/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { EFFECT_PAYMENT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INIT_DISCRIMINATOR = new Uint8Array([
  220, 59, 207, 236, 108, 250, 47, 100,
]);

export function getInitDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INIT_DISCRIMINATOR);
}

export type InitInstruction<
  TProgram extends string = typeof EFFECT_PAYMENT_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountRecipientManagerDataAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountRecipientManagerDataAccount extends string
        ? WritableAccount<TAccountRecipientManagerDataAccount>
        : TAccountRecipientManagerDataAccount,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitInstructionData = {
  discriminator: ReadonlyUint8Array;
  managerAuthority: Address;
};

export type InitInstructionDataArgs = { managerAuthority: Address };

export function getInitInstructionDataEncoder(): Encoder<InitInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['managerAuthority', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: INIT_DISCRIMINATOR })
  );
}

export function getInitInstructionDataDecoder(): Decoder<InitInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['managerAuthority', getAddressDecoder()],
  ]);
}

export function getInitInstructionDataCodec(): Codec<
  InitInstructionDataArgs,
  InitInstructionData
> {
  return combineCodec(
    getInitInstructionDataEncoder(),
    getInitInstructionDataDecoder()
  );
}

export type InitAsyncInput<
  TAccountAuthority extends string = string,
  TAccountRecipientManagerDataAccount extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  recipientManagerDataAccount?: Address<TAccountRecipientManagerDataAccount>;
  mint: Address<TAccountMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  managerAuthority: InitInstructionDataArgs['managerAuthority'];
};

export async function getInitInstructionAsync<
  TAccountAuthority extends string,
  TAccountRecipientManagerDataAccount extends string,
  TAccountMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof EFFECT_PAYMENT_PROGRAM_ADDRESS,
>(
  input: InitAsyncInput<
    TAccountAuthority,
    TAccountRecipientManagerDataAccount,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountRecipientManagerDataAccount,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_PAYMENT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    recipientManagerDataAccount: {
      value: input.recipientManagerDataAccount ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.recipientManagerDataAccount.value) {
    accounts.recipientManagerDataAccount.value = await getProgramDerivedAddress(
      {
        programAddress,
        seeds: [
          getAddressEncoder().encode(expectAddress(accounts.authority.value)),
          getAddressEncoder().encode(expectSome(args.managerAuthority)),
        ],
      }
    );
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.recipientManagerDataAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitInstructionDataEncoder().encode(
      args as InitInstructionDataArgs
    ),
  } as InitInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountRecipientManagerDataAccount,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type InitInput<
  TAccountAuthority extends string = string,
  TAccountRecipientManagerDataAccount extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  recipientManagerDataAccount: Address<TAccountRecipientManagerDataAccount>;
  mint: Address<TAccountMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  managerAuthority: InitInstructionDataArgs['managerAuthority'];
};

export function getInitInstruction<
  TAccountAuthority extends string,
  TAccountRecipientManagerDataAccount extends string,
  TAccountMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof EFFECT_PAYMENT_PROGRAM_ADDRESS,
>(
  input: InitInput<
    TAccountAuthority,
    TAccountRecipientManagerDataAccount,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountRecipientManagerDataAccount,
  TAccountMint,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_PAYMENT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    recipientManagerDataAccount: {
      value: input.recipientManagerDataAccount ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.recipientManagerDataAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitInstructionDataEncoder().encode(
      args as InitInstructionDataArgs
    ),
  } as InitInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountRecipientManagerDataAccount,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedInitInstruction<
  TProgram extends string = typeof EFFECT_PAYMENT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    recipientManagerDataAccount: TAccountMetas[1];
    mint: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
  };
  data: InitInstructionData;
};

export function parseInitInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      recipientManagerDataAccount: getNextAccount(),
      mint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getInitInstructionDataDecoder().decode(instruction.data),
  };
}
