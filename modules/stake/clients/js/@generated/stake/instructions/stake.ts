/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { EFFECT_STAKING_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const STAKE_DISCRIMINATOR = new Uint8Array([
  206, 176, 202, 18, 200, 209, 179, 108,
]);

export function getStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(STAKE_DISCRIMINATOR);
}

export type StakeInstruction<
  TProgram extends string = typeof EFFECT_STAKING_PROGRAM_ADDRESS,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountUserTokenAccount extends string | AccountMeta<string> = string,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountStakeVaultTokenAccount extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountUserTokenAccount extends string
        ? WritableAccount<TAccountUserTokenAccount>
        : TAccountUserTokenAccount,
      TAccountStakeAccount extends string
        ? WritableSignerAccount<TAccountStakeAccount> &
            AccountSignerMeta<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountStakeVaultTokenAccount extends string
        ? WritableAccount<TAccountStakeVaultTokenAccount>
        : TAccountStakeVaultTokenAccount,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type StakeInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
  duration: bigint;
};

export type StakeInstructionDataArgs = {
  amount: number | bigint;
  duration: number | bigint;
};

export function getStakeInstructionDataEncoder(): FixedSizeEncoder<StakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
      ['duration', getU128Encoder()],
    ]),
    (value) => ({ ...value, discriminator: STAKE_DISCRIMINATOR })
  );
}

export function getStakeInstructionDataDecoder(): FixedSizeDecoder<StakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
    ['duration', getU128Decoder()],
  ]);
}

export function getStakeInstructionDataCodec(): FixedSizeCodec<
  StakeInstructionDataArgs,
  StakeInstructionData
> {
  return combineCodec(
    getStakeInstructionDataEncoder(),
    getStakeInstructionDataDecoder()
  );
}

export type StakeAsyncInput<
  TAccountMint extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountStakeVaultTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  mint: Address<TAccountMint>;
  userTokenAccount: Address<TAccountUserTokenAccount>;
  stakeAccount: TransactionSigner<TAccountStakeAccount>;
  stakeVaultTokenAccount?: Address<TAccountStakeVaultTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
  amount: StakeInstructionDataArgs['amount'];
  duration: StakeInstructionDataArgs['duration'];
};

export async function getStakeInstructionAsync<
  TAccountMint extends string,
  TAccountUserTokenAccount extends string,
  TAccountStakeAccount extends string,
  TAccountStakeVaultTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof EFFECT_STAKING_PROGRAM_ADDRESS,
>(
  input: StakeAsyncInput<
    TAccountMint,
    TAccountUserTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  StakeInstruction<
    TProgramAddress,
    TAccountMint,
    TAccountUserTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_STAKING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: true },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    stakeVaultTokenAccount: {
      value: input.stakeVaultTokenAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.stakeVaultTokenAccount.value) {
    accounts.stakeVaultTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakeAccount.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.stakeVaultTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getStakeInstructionDataEncoder().encode(
      args as StakeInstructionDataArgs
    ),
  } as StakeInstruction<
    TProgramAddress,
    TAccountMint,
    TAccountUserTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type StakeInput<
  TAccountMint extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountStakeVaultTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  mint: Address<TAccountMint>;
  userTokenAccount: Address<TAccountUserTokenAccount>;
  stakeAccount: TransactionSigner<TAccountStakeAccount>;
  stakeVaultTokenAccount: Address<TAccountStakeVaultTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
  amount: StakeInstructionDataArgs['amount'];
  duration: StakeInstructionDataArgs['duration'];
};

export function getStakeInstruction<
  TAccountMint extends string,
  TAccountUserTokenAccount extends string,
  TAccountStakeAccount extends string,
  TAccountStakeVaultTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof EFFECT_STAKING_PROGRAM_ADDRESS,
>(
  input: StakeInput<
    TAccountMint,
    TAccountUserTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): StakeInstruction<
  TProgramAddress,
  TAccountMint,
  TAccountUserTokenAccount,
  TAccountStakeAccount,
  TAccountStakeVaultTokenAccount,
  TAccountAuthority,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_STAKING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: true },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    stakeVaultTokenAccount: {
      value: input.stakeVaultTokenAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.stakeVaultTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getStakeInstructionDataEncoder().encode(
      args as StakeInstructionDataArgs
    ),
  } as StakeInstruction<
    TProgramAddress,
    TAccountMint,
    TAccountUserTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedStakeInstruction<
  TProgram extends string = typeof EFFECT_STAKING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    mint: TAccountMetas[0];
    userTokenAccount: TAccountMetas[1];
    stakeAccount: TAccountMetas[2];
    stakeVaultTokenAccount: TAccountMetas[3];
    authority: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    rent: TAccountMetas[7];
  };
  data: StakeInstructionData;
};

export function parseStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mint: getNextAccount(),
      userTokenAccount: getNextAccount(),
      stakeAccount: getNextAccount(),
      stakeVaultTokenAccount: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getStakeInstructionDataDecoder().decode(instruction.data),
  };
}
