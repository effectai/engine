/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { EFFECT_STAKING_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const STAKE_GENESIS_DISCRIMINATOR = new Uint8Array([
  254, 31, 23, 18, 216, 245, 224, 83,
]);

export function getStakeGenesisDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    STAKE_GENESIS_DISCRIMINATOR
  );
}

export type StakeGenesisInstruction<
  TProgram extends string = typeof EFFECT_STAKING_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountUserTokenAccount extends string | AccountMeta<string> = string,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountStakeVaultTokenAccount extends string | AccountMeta<string> = string,
  TAccountMigrationAccount extends string | AccountMeta<string> = string,
  TAccountMigrationVaultTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountMigrationProgram extends
    | string
    | AccountMeta<string> = 'effM4rzQbgZD8J5wkubJbSVxTgRFWtatQcQEgYuwqrR',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountUserTokenAccount extends string
        ? WritableAccount<TAccountUserTokenAccount>
        : TAccountUserTokenAccount,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountStakeVaultTokenAccount extends string
        ? WritableAccount<TAccountStakeVaultTokenAccount>
        : TAccountStakeVaultTokenAccount,
      TAccountMigrationAccount extends string
        ? ReadonlyAccount<TAccountMigrationAccount>
        : TAccountMigrationAccount,
      TAccountMigrationVaultTokenAccount extends string
        ? WritableSignerAccount<TAccountMigrationVaultTokenAccount> &
            AccountSignerMeta<TAccountMigrationVaultTokenAccount>
        : TAccountMigrationVaultTokenAccount,
      TAccountMigrationProgram extends string
        ? ReadonlyAccount<TAccountMigrationProgram>
        : TAccountMigrationProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type StakeGenesisInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
  stakeStartTime: bigint;
};

export type StakeGenesisInstructionDataArgs = {
  amount: number | bigint;
  stakeStartTime: number | bigint;
};

export function getStakeGenesisInstructionDataEncoder(): FixedSizeEncoder<StakeGenesisInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
      ['stakeStartTime', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: STAKE_GENESIS_DISCRIMINATOR })
  );
}

export function getStakeGenesisInstructionDataDecoder(): FixedSizeDecoder<StakeGenesisInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
    ['stakeStartTime', getI64Decoder()],
  ]);
}

export function getStakeGenesisInstructionDataCodec(): FixedSizeCodec<
  StakeGenesisInstructionDataArgs,
  StakeGenesisInstructionData
> {
  return combineCodec(
    getStakeGenesisInstructionDataEncoder(),
    getStakeGenesisInstructionDataDecoder()
  );
}

export type StakeGenesisAsyncInput<
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountStakeVaultTokenAccount extends string = string,
  TAccountMigrationAccount extends string = string,
  TAccountMigrationVaultTokenAccount extends string = string,
  TAccountMigrationProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  mint: Address<TAccountMint>;
  userTokenAccount: Address<TAccountUserTokenAccount>;
  stakeAccount: Address<TAccountStakeAccount>;
  stakeVaultTokenAccount?: Address<TAccountStakeVaultTokenAccount>;
  migrationAccount: Address<TAccountMigrationAccount>;
  migrationVaultTokenAccount?: TransactionSigner<TAccountMigrationVaultTokenAccount>;
  migrationProgram?: Address<TAccountMigrationProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
  amount: StakeGenesisInstructionDataArgs['amount'];
  stakeStartTime: StakeGenesisInstructionDataArgs['stakeStartTime'];
};

export async function getStakeGenesisInstructionAsync<
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountUserTokenAccount extends string,
  TAccountStakeAccount extends string,
  TAccountStakeVaultTokenAccount extends string,
  TAccountMigrationAccount extends string,
  TAccountMigrationVaultTokenAccount extends string,
  TAccountMigrationProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof EFFECT_STAKING_PROGRAM_ADDRESS,
>(
  input: StakeGenesisAsyncInput<
    TAccountAuthority,
    TAccountMint,
    TAccountUserTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountMigrationAccount,
    TAccountMigrationVaultTokenAccount,
    TAccountMigrationProgram,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  StakeGenesisInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountUserTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountMigrationAccount,
    TAccountMigrationVaultTokenAccount,
    TAccountMigrationProgram,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_STAKING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    stakeVaultTokenAccount: {
      value: input.stakeVaultTokenAccount ?? null,
      isWritable: true,
    },
    migrationAccount: {
      value: input.migrationAccount ?? null,
      isWritable: false,
    },
    migrationVaultTokenAccount: {
      value: input.migrationVaultTokenAccount ?? null,
      isWritable: true,
    },
    migrationProgram: {
      value: input.migrationProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.stakeVaultTokenAccount.value) {
    accounts.stakeVaultTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakeAccount.value)),
      ],
    });
  }
  if (!accounts.migrationVaultTokenAccount.value) {
    accounts.migrationVaultTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.migrationAccount.value)
        ),
      ],
    });
  }
  if (!accounts.migrationProgram.value) {
    accounts.migrationProgram.value =
      'effM4rzQbgZD8J5wkubJbSVxTgRFWtatQcQEgYuwqrR' as Address<'effM4rzQbgZD8J5wkubJbSVxTgRFWtatQcQEgYuwqrR'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.stakeVaultTokenAccount),
      getAccountMeta(accounts.migrationAccount),
      getAccountMeta(accounts.migrationVaultTokenAccount),
      getAccountMeta(accounts.migrationProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getStakeGenesisInstructionDataEncoder().encode(
      args as StakeGenesisInstructionDataArgs
    ),
  } as StakeGenesisInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountUserTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountMigrationAccount,
    TAccountMigrationVaultTokenAccount,
    TAccountMigrationProgram,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type StakeGenesisInput<
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountStakeVaultTokenAccount extends string = string,
  TAccountMigrationAccount extends string = string,
  TAccountMigrationVaultTokenAccount extends string = string,
  TAccountMigrationProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  mint: Address<TAccountMint>;
  userTokenAccount: Address<TAccountUserTokenAccount>;
  stakeAccount: Address<TAccountStakeAccount>;
  stakeVaultTokenAccount: Address<TAccountStakeVaultTokenAccount>;
  migrationAccount: Address<TAccountMigrationAccount>;
  migrationVaultTokenAccount: TransactionSigner<TAccountMigrationVaultTokenAccount>;
  migrationProgram?: Address<TAccountMigrationProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
  amount: StakeGenesisInstructionDataArgs['amount'];
  stakeStartTime: StakeGenesisInstructionDataArgs['stakeStartTime'];
};

export function getStakeGenesisInstruction<
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountUserTokenAccount extends string,
  TAccountStakeAccount extends string,
  TAccountStakeVaultTokenAccount extends string,
  TAccountMigrationAccount extends string,
  TAccountMigrationVaultTokenAccount extends string,
  TAccountMigrationProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof EFFECT_STAKING_PROGRAM_ADDRESS,
>(
  input: StakeGenesisInput<
    TAccountAuthority,
    TAccountMint,
    TAccountUserTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountMigrationAccount,
    TAccountMigrationVaultTokenAccount,
    TAccountMigrationProgram,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): StakeGenesisInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountMint,
  TAccountUserTokenAccount,
  TAccountStakeAccount,
  TAccountStakeVaultTokenAccount,
  TAccountMigrationAccount,
  TAccountMigrationVaultTokenAccount,
  TAccountMigrationProgram,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_STAKING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    stakeVaultTokenAccount: {
      value: input.stakeVaultTokenAccount ?? null,
      isWritable: true,
    },
    migrationAccount: {
      value: input.migrationAccount ?? null,
      isWritable: false,
    },
    migrationVaultTokenAccount: {
      value: input.migrationVaultTokenAccount ?? null,
      isWritable: true,
    },
    migrationProgram: {
      value: input.migrationProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.migrationProgram.value) {
    accounts.migrationProgram.value =
      'effM4rzQbgZD8J5wkubJbSVxTgRFWtatQcQEgYuwqrR' as Address<'effM4rzQbgZD8J5wkubJbSVxTgRFWtatQcQEgYuwqrR'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.stakeVaultTokenAccount),
      getAccountMeta(accounts.migrationAccount),
      getAccountMeta(accounts.migrationVaultTokenAccount),
      getAccountMeta(accounts.migrationProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getStakeGenesisInstructionDataEncoder().encode(
      args as StakeGenesisInstructionDataArgs
    ),
  } as StakeGenesisInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountUserTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountMigrationAccount,
    TAccountMigrationVaultTokenAccount,
    TAccountMigrationProgram,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedStakeGenesisInstruction<
  TProgram extends string = typeof EFFECT_STAKING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    mint: TAccountMetas[1];
    userTokenAccount: TAccountMetas[2];
    stakeAccount: TAccountMetas[3];
    stakeVaultTokenAccount: TAccountMetas[4];
    migrationAccount: TAccountMetas[5];
    migrationVaultTokenAccount: TAccountMetas[6];
    migrationProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
    rent: TAccountMetas[10];
  };
  data: StakeGenesisInstructionData;
};

export function parseStakeGenesisInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedStakeGenesisInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      mint: getNextAccount(),
      userTokenAccount: getNextAccount(),
      stakeAccount: getNextAccount(),
      stakeVaultTokenAccount: getNextAccount(),
      migrationAccount: getNextAccount(),
      migrationVaultTokenAccount: getNextAccount(),
      migrationProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getStakeGenesisInstructionDataDecoder().decode(instruction.data),
  };
}
