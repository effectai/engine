/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const REFLECTION_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  205, 153, 160, 54, 239, 26, 219, 188,
]);

export function getReflectionAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REFLECTION_ACCOUNT_DISCRIMINATOR
  );
}

export type ReflectionAccount = {
  discriminator: ReadonlyUint8Array;
  rate: bigint;
  totalReflection: bigint;
  totalWeightedAmount: bigint;
};

export type ReflectionAccountArgs = {
  rate: number | bigint;
  totalReflection: number | bigint;
  totalWeightedAmount: number | bigint;
};

export function getReflectionAccountEncoder(): FixedSizeEncoder<ReflectionAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['rate', getU128Encoder()],
      ['totalReflection', getU128Encoder()],
      ['totalWeightedAmount', getU128Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REFLECTION_ACCOUNT_DISCRIMINATOR })
  );
}

export function getReflectionAccountDecoder(): FixedSizeDecoder<ReflectionAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['rate', getU128Decoder()],
    ['totalReflection', getU128Decoder()],
    ['totalWeightedAmount', getU128Decoder()],
  ]);
}

export function getReflectionAccountCodec(): FixedSizeCodec<
  ReflectionAccountArgs,
  ReflectionAccount
> {
  return combineCodec(
    getReflectionAccountEncoder(),
    getReflectionAccountDecoder()
  );
}

export function decodeReflectionAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ReflectionAccount, TAddress>;
export function decodeReflectionAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ReflectionAccount, TAddress>;
export function decodeReflectionAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ReflectionAccount, TAddress>
  | MaybeAccount<ReflectionAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getReflectionAccountDecoder()
  );
}

export async function fetchReflectionAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ReflectionAccount, TAddress>> {
  const maybeAccount = await fetchMaybeReflectionAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeReflectionAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ReflectionAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeReflectionAccount(maybeAccount);
}

export async function fetchAllReflectionAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ReflectionAccount>[]> {
  const maybeAccounts = await fetchAllMaybeReflectionAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeReflectionAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ReflectionAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeReflectionAccount(maybeAccount)
  );
}

export function getReflectionAccountSize(): number {
  return 56;
}
