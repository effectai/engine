/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { EFFECT_VESTING_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const OPEN_DISCRIMINATOR = new Uint8Array([
  228, 220, 155, 71, 199, 189, 60, 45,
]);

export function getOpenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(OPEN_DISCRIMINATOR);
}

export type OpenInstruction<
  TProgram extends string = typeof EFFECT_VESTING_PROGRAM_ADDRESS,
  TAccountVestingAccount extends string | IAccountMeta<string> = string,
  TAccountVestingVaultTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountRecipientTokenAccount extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVestingAccount extends string
        ? WritableSignerAccount<TAccountVestingAccount> &
            IAccountSignerMeta<TAccountVestingAccount>
        : TAccountVestingAccount,
      TAccountVestingVaultTokenAccount extends string
        ? WritableAccount<TAccountVestingVaultTokenAccount>
        : TAccountVestingVaultTokenAccount,
      TAccountRecipientTokenAccount extends string
        ? ReadonlyAccount<TAccountRecipientTokenAccount>
        : TAccountRecipientTokenAccount,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type OpenInstructionData = {
  discriminator: ReadonlyUint8Array;
  releaseRate: bigint;
  startTime: bigint;
  isClosable: boolean;
  tag: Option<ReadonlyUint8Array>;
};

export type OpenInstructionDataArgs = {
  releaseRate: number | bigint;
  startTime: number | bigint;
  isClosable: boolean;
  tag: OptionOrNullable<ReadonlyUint8Array>;
};

export function getOpenInstructionDataEncoder(): Encoder<OpenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['releaseRate', getU64Encoder()],
      ['startTime', getI64Encoder()],
      ['isClosable', getBooleanEncoder()],
      ['tag', getOptionEncoder(fixEncoderSize(getBytesEncoder(), 1))],
    ]),
    (value) => ({ ...value, discriminator: OPEN_DISCRIMINATOR })
  );
}

export function getOpenInstructionDataDecoder(): Decoder<OpenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['releaseRate', getU64Decoder()],
    ['startTime', getI64Decoder()],
    ['isClosable', getBooleanDecoder()],
    ['tag', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 1))],
  ]);
}

export function getOpenInstructionDataCodec(): Codec<
  OpenInstructionDataArgs,
  OpenInstructionData
> {
  return combineCodec(
    getOpenInstructionDataEncoder(),
    getOpenInstructionDataDecoder()
  );
}

export type OpenAsyncInput<
  TAccountVestingAccount extends string = string,
  TAccountVestingVaultTokenAccount extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  vestingAccount: TransactionSigner<TAccountVestingAccount>;
  vestingVaultTokenAccount?: Address<TAccountVestingVaultTokenAccount>;
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  mint: Address<TAccountMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
  releaseRate: OpenInstructionDataArgs['releaseRate'];
  startTime: OpenInstructionDataArgs['startTime'];
  isClosable: OpenInstructionDataArgs['isClosable'];
  tag: OpenInstructionDataArgs['tag'];
};

export async function getOpenInstructionAsync<
  TAccountVestingAccount extends string,
  TAccountVestingVaultTokenAccount extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof EFFECT_VESTING_PROGRAM_ADDRESS,
>(
  input: OpenAsyncInput<
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountAuthority,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  OpenInstruction<
    TProgramAddress,
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountAuthority,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_VESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vestingAccount: { value: input.vestingAccount ?? null, isWritable: true },
    vestingVaultTokenAccount: {
      value: input.vestingVaultTokenAccount ?? null,
      isWritable: true,
    },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.vestingVaultTokenAccount.value) {
    accounts.vestingVaultTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.vestingAccount.value)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vestingAccount),
      getAccountMeta(accounts.vestingVaultTokenAccount),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getOpenInstructionDataEncoder().encode(
      args as OpenInstructionDataArgs
    ),
  } as OpenInstruction<
    TProgramAddress,
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountAuthority,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type OpenInput<
  TAccountVestingAccount extends string = string,
  TAccountVestingVaultTokenAccount extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  vestingAccount: TransactionSigner<TAccountVestingAccount>;
  vestingVaultTokenAccount: Address<TAccountVestingVaultTokenAccount>;
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  mint: Address<TAccountMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
  releaseRate: OpenInstructionDataArgs['releaseRate'];
  startTime: OpenInstructionDataArgs['startTime'];
  isClosable: OpenInstructionDataArgs['isClosable'];
  tag: OpenInstructionDataArgs['tag'];
};

export function getOpenInstruction<
  TAccountVestingAccount extends string,
  TAccountVestingVaultTokenAccount extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof EFFECT_VESTING_PROGRAM_ADDRESS,
>(
  input: OpenInput<
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountAuthority,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): OpenInstruction<
  TProgramAddress,
  TAccountVestingAccount,
  TAccountVestingVaultTokenAccount,
  TAccountRecipientTokenAccount,
  TAccountAuthority,
  TAccountMint,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_VESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vestingAccount: { value: input.vestingAccount ?? null, isWritable: true },
    vestingVaultTokenAccount: {
      value: input.vestingVaultTokenAccount ?? null,
      isWritable: true,
    },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vestingAccount),
      getAccountMeta(accounts.vestingVaultTokenAccount),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getOpenInstructionDataEncoder().encode(
      args as OpenInstructionDataArgs
    ),
  } as OpenInstruction<
    TProgramAddress,
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountAuthority,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedOpenInstruction<
  TProgram extends string = typeof EFFECT_VESTING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    vestingAccount: TAccountMetas[0];
    vestingVaultTokenAccount: TAccountMetas[1];
    recipientTokenAccount: TAccountMetas[2];
    authority: TAccountMetas[3];
    mint: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    rent: TAccountMetas[7];
  };
  data: OpenInstructionData;
};

export function parseOpenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedOpenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vestingAccount: getNextAccount(),
      vestingVaultTokenAccount: getNextAccount(),
      recipientTokenAccount: getNextAccount(),
      authority: getNextAccount(),
      mint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getOpenInstructionDataDecoder().decode(instruction.data),
  };
}
