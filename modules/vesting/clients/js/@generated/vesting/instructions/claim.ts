/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { EFFECT_VESTING_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_DISCRIMINATOR = new Uint8Array([
  62, 198, 214, 193, 213, 159, 108, 210,
]);

export function getClaimDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLAIM_DISCRIMINATOR);
}

export type ClaimInstruction<
  TProgram extends string = typeof EFFECT_VESTING_PROGRAM_ADDRESS,
  TAccountVestingAccount extends string | IAccountMeta<string> = string,
  TAccountVestingVaultTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountRecipientTokenAccount extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVestingAccount extends string
        ? WritableAccount<TAccountVestingAccount>
        : TAccountVestingAccount,
      TAccountVestingVaultTokenAccount extends string
        ? WritableAccount<TAccountVestingVaultTokenAccount>
        : TAccountVestingVaultTokenAccount,
      TAccountRecipientTokenAccount extends string
        ? WritableAccount<TAccountRecipientTokenAccount>
        : TAccountRecipientTokenAccount,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimInstructionData = { discriminator: ReadonlyUint8Array };

export type ClaimInstructionDataArgs = {};

export function getClaimInstructionDataEncoder(): Encoder<ClaimInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLAIM_DISCRIMINATOR })
  );
}

export function getClaimInstructionDataDecoder(): Decoder<ClaimInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimInstructionDataCodec(): Codec<
  ClaimInstructionDataArgs,
  ClaimInstructionData
> {
  return combineCodec(
    getClaimInstructionDataEncoder(),
    getClaimInstructionDataDecoder()
  );
}

export type ClaimAsyncInput<
  TAccountVestingAccount extends string = string,
  TAccountVestingVaultTokenAccount extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  vestingAccount: Address<TAccountVestingAccount>;
  vestingVaultTokenAccount?: Address<TAccountVestingVaultTokenAccount>;
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export async function getClaimInstructionAsync<
  TAccountVestingAccount extends string,
  TAccountVestingVaultTokenAccount extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof EFFECT_VESTING_PROGRAM_ADDRESS,
>(
  input: ClaimAsyncInput<
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimInstruction<
    TProgramAddress,
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_VESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vestingAccount: { value: input.vestingAccount ?? null, isWritable: true },
    vestingVaultTokenAccount: {
      value: input.vestingVaultTokenAccount ?? null,
      isWritable: true,
    },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.vestingVaultTokenAccount.value) {
    accounts.vestingVaultTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.vestingAccount.value)
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vestingAccount),
      getAccountMeta(accounts.vestingVaultTokenAccount),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getClaimInstructionDataEncoder().encode({}),
  } as ClaimInstruction<
    TProgramAddress,
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ClaimInput<
  TAccountVestingAccount extends string = string,
  TAccountVestingVaultTokenAccount extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  vestingAccount: Address<TAccountVestingAccount>;
  vestingVaultTokenAccount: Address<TAccountVestingVaultTokenAccount>;
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getClaimInstruction<
  TAccountVestingAccount extends string,
  TAccountVestingVaultTokenAccount extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof EFFECT_VESTING_PROGRAM_ADDRESS,
>(
  input: ClaimInput<
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimInstruction<
  TProgramAddress,
  TAccountVestingAccount,
  TAccountVestingVaultTokenAccount,
  TAccountRecipientTokenAccount,
  TAccountAuthority,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_VESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vestingAccount: { value: input.vestingAccount ?? null, isWritable: true },
    vestingVaultTokenAccount: {
      value: input.vestingVaultTokenAccount ?? null,
      isWritable: true,
    },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vestingAccount),
      getAccountMeta(accounts.vestingVaultTokenAccount),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getClaimInstructionDataEncoder().encode({}),
  } as ClaimInstruction<
    TProgramAddress,
    TAccountVestingAccount,
    TAccountVestingVaultTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedClaimInstruction<
  TProgram extends string = typeof EFFECT_VESTING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    vestingAccount: TAccountMetas[0];
    vestingVaultTokenAccount: TAccountMetas[1];
    recipientTokenAccount: TAccountMetas[2];
    authority: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
  };
  data: ClaimInstructionData;
};

export function parseClaimInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vestingAccount: getNextAccount(),
      vestingVaultTokenAccount: getNextAccount(),
      recipientTokenAccount: getNextAccount(),
      authority: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getClaimInstructionDataDecoder().decode(instruction.data),
  };
}
