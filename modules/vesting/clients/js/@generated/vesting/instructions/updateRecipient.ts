/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { EFFECT_VESTING_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_RECIPIENT_DISCRIMINATOR = new Uint8Array([
  55, 190, 61, 121, 131, 132, 8, 54,
]);

export function getUpdateRecipientDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_RECIPIENT_DISCRIMINATOR
  );
}

export type UpdateRecipientInstruction<
  TProgram extends string = typeof EFFECT_VESTING_PROGRAM_ADDRESS,
  TAccountRecipientTokenAccount extends string | IAccountMeta<string> = string,
  TAccountNewRecipientTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountVestingAccount extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRecipientTokenAccount extends string
        ? ReadonlyAccount<TAccountRecipientTokenAccount>
        : TAccountRecipientTokenAccount,
      TAccountNewRecipientTokenAccount extends string
        ? ReadonlyAccount<TAccountNewRecipientTokenAccount>
        : TAccountNewRecipientTokenAccount,
      TAccountVestingAccount extends string
        ? WritableAccount<TAccountVestingAccount>
        : TAccountVestingAccount,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateRecipientInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type UpdateRecipientInstructionDataArgs = {};

export function getUpdateRecipientInstructionDataEncoder(): Encoder<UpdateRecipientInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: UPDATE_RECIPIENT_DISCRIMINATOR })
  );
}

export function getUpdateRecipientInstructionDataDecoder(): Decoder<UpdateRecipientInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUpdateRecipientInstructionDataCodec(): Codec<
  UpdateRecipientInstructionDataArgs,
  UpdateRecipientInstructionData
> {
  return combineCodec(
    getUpdateRecipientInstructionDataEncoder(),
    getUpdateRecipientInstructionDataDecoder()
  );
}

export type UpdateRecipientInput<
  TAccountRecipientTokenAccount extends string = string,
  TAccountNewRecipientTokenAccount extends string = string,
  TAccountVestingAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  newRecipientTokenAccount: Address<TAccountNewRecipientTokenAccount>;
  vestingAccount: Address<TAccountVestingAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getUpdateRecipientInstruction<
  TAccountRecipientTokenAccount extends string,
  TAccountNewRecipientTokenAccount extends string,
  TAccountVestingAccount extends string,
  TAccountAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof EFFECT_VESTING_PROGRAM_ADDRESS,
>(
  input: UpdateRecipientInput<
    TAccountRecipientTokenAccount,
    TAccountNewRecipientTokenAccount,
    TAccountVestingAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateRecipientInstruction<
  TProgramAddress,
  TAccountRecipientTokenAccount,
  TAccountNewRecipientTokenAccount,
  TAccountVestingAccount,
  TAccountAuthority,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_VESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: false,
    },
    newRecipientTokenAccount: {
      value: input.newRecipientTokenAccount ?? null,
      isWritable: false,
    },
    vestingAccount: { value: input.vestingAccount ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.newRecipientTokenAccount),
      getAccountMeta(accounts.vestingAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getUpdateRecipientInstructionDataEncoder().encode({}),
  } as UpdateRecipientInstruction<
    TProgramAddress,
    TAccountRecipientTokenAccount,
    TAccountNewRecipientTokenAccount,
    TAccountVestingAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedUpdateRecipientInstruction<
  TProgram extends string = typeof EFFECT_VESTING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    recipientTokenAccount: TAccountMetas[0];
    newRecipientTokenAccount: TAccountMetas[1];
    vestingAccount: TAccountMetas[2];
    authority: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
  };
  data: UpdateRecipientInstructionData;
};

export function parseUpdateRecipientInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateRecipientInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      recipientTokenAccount: getNextAccount(),
      newRecipientTokenAccount: getNextAccount(),
      vestingAccount: getNextAccount(),
      authority: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getUpdateRecipientInstructionDataDecoder().decode(instruction.data),
  };
}
