/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { EFFECT_VESTING_PROGRAM_ADDRESS } from '../programs';

/** Unauthorized: Unauthorized */
export const EFFECT_VESTING_ERROR__UNAUTHORIZED = 0x1770; // 6000

export type EffectVestingError = typeof EFFECT_VESTING_ERROR__UNAUTHORIZED;

let effectVestingErrorMessages: Record<EffectVestingError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  effectVestingErrorMessages = {
    [EFFECT_VESTING_ERROR__UNAUTHORIZED]: `Unauthorized`,
  };
}

export function getEffectVestingErrorMessage(code: EffectVestingError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (effectVestingErrorMessages as Record<EffectVestingError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isEffectVestingError<
  TProgramErrorCode extends EffectVestingError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    EFFECT_VESTING_PROGRAM_ADDRESS,
    code
  );
}
