/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { EFFECT_VESTING_PROGRAM_ADDRESS } from '../programs';

/** Unauthorized: Unauthorized */
export const EFFECT_VESTING_ERROR__UNAUTHORIZED = 0x1770; // 6000
/** NotStarted: This pool has not started yet. */
export const EFFECT_VESTING_ERROR__NOT_STARTED = 0x1771; // 6001
/** Underfunded: This pool does not have enough funds. */
export const EFFECT_VESTING_ERROR__UNDERFUNDED = 0x1772; // 6002
/** NotCloseable: This pool is not closeable. */
export const EFFECT_VESTING_ERROR__NOT_CLOSEABLE = 0x1773; // 6003
/** WrongClaimType: This pool has a different claim type. */
export const EFFECT_VESTING_ERROR__WRONG_CLAIM_TYPE = 0x1774; // 6004
/** WrongBeneficiary: This pool does not match the beneficiary. */
export const EFFECT_VESTING_ERROR__WRONG_BENEFICIARY = 0x1775; // 6005
/** InvalidTokenAccount: This pool has an invalid token account. */
export const EFFECT_VESTING_ERROR__INVALID_TOKEN_ACCOUNT = 0x1776; // 6006
/** InvalidVault: Invalid vault */
export const EFFECT_VESTING_ERROR__INVALID_VAULT = 0x1777; // 6007
/** ClaimFailed: Claim failed */
export const EFFECT_VESTING_ERROR__CLAIM_FAILED = 0x1778; // 6008

export type EffectVestingError =
  | typeof EFFECT_VESTING_ERROR__CLAIM_FAILED
  | typeof EFFECT_VESTING_ERROR__INVALID_TOKEN_ACCOUNT
  | typeof EFFECT_VESTING_ERROR__INVALID_VAULT
  | typeof EFFECT_VESTING_ERROR__NOT_CLOSEABLE
  | typeof EFFECT_VESTING_ERROR__NOT_STARTED
  | typeof EFFECT_VESTING_ERROR__UNAUTHORIZED
  | typeof EFFECT_VESTING_ERROR__UNDERFUNDED
  | typeof EFFECT_VESTING_ERROR__WRONG_BENEFICIARY
  | typeof EFFECT_VESTING_ERROR__WRONG_CLAIM_TYPE;

let effectVestingErrorMessages: Record<EffectVestingError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  effectVestingErrorMessages = {
    [EFFECT_VESTING_ERROR__CLAIM_FAILED]: `Claim failed`,
    [EFFECT_VESTING_ERROR__INVALID_TOKEN_ACCOUNT]: `This pool has an invalid token account.`,
    [EFFECT_VESTING_ERROR__INVALID_VAULT]: `Invalid vault`,
    [EFFECT_VESTING_ERROR__NOT_CLOSEABLE]: `This pool is not closeable.`,
    [EFFECT_VESTING_ERROR__NOT_STARTED]: `This pool has not started yet.`,
    [EFFECT_VESTING_ERROR__UNAUTHORIZED]: `Unauthorized`,
    [EFFECT_VESTING_ERROR__UNDERFUNDED]: `This pool does not have enough funds.`,
    [EFFECT_VESTING_ERROR__WRONG_BENEFICIARY]: `This pool does not match the beneficiary.`,
    [EFFECT_VESTING_ERROR__WRONG_CLAIM_TYPE]: `This pool has a different claim type.`,
  };
}

export function getEffectVestingErrorMessage(code: EffectVestingError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (effectVestingErrorMessages as Record<EffectVestingError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isEffectVestingError<
  TProgramErrorCode extends EffectVestingError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    EFFECT_VESTING_PROGRAM_ADDRESS,
    code
  );
}
