/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedClaimStakeInstruction,
  type ParsedCreateStakeClaimInstruction,
  type ParsedDestroyClaimInstruction,
} from '../instructions';

export const EFFECT_MIGRATION_PROGRAM_ADDRESS =
  'effM4rzQbgZD8J5wkubJbSVxTgRFWtatQcQEgYuwqrR' as Address<'effM4rzQbgZD8J5wkubJbSVxTgRFWtatQcQEgYuwqrR'>;

export enum EffectMigrationAccount {
  MigrationAccount,
  StakeAccount,
}

export function identifyEffectMigrationAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EffectMigrationAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 168, 118, 35, 238, 212, 16, 172])
      ),
      0
    )
  ) {
    return EffectMigrationAccount.MigrationAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 158, 67, 124, 50, 189, 192, 255])
      ),
      0
    )
  ) {
    return EffectMigrationAccount.StakeAccount;
  }
  throw new Error(
    'The provided account could not be identified as a effectMigration account.'
  );
}

export enum EffectMigrationInstruction {
  ClaimStake,
  CreateStakeClaim,
  DestroyClaim,
}

export function identifyEffectMigrationInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EffectMigrationInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([62, 145, 133, 242, 244, 59, 53, 139])
      ),
      0
    )
  ) {
    return EffectMigrationInstruction.ClaimStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([209, 124, 209, 232, 131, 66, 118, 116])
      ),
      0
    )
  ) {
    return EffectMigrationInstruction.CreateStakeClaim;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([223, 1, 238, 215, 51, 229, 149, 94])
      ),
      0
    )
  ) {
    return EffectMigrationInstruction.DestroyClaim;
  }
  throw new Error(
    'The provided instruction could not be identified as a effectMigration instruction.'
  );
}

export type ParsedEffectMigrationInstruction<
  TProgram extends string = 'effM4rzQbgZD8J5wkubJbSVxTgRFWtatQcQEgYuwqrR',
> =
  | ({
      instructionType: EffectMigrationInstruction.ClaimStake;
    } & ParsedClaimStakeInstruction<TProgram>)
  | ({
      instructionType: EffectMigrationInstruction.CreateStakeClaim;
    } & ParsedCreateStakeClaimInstruction<TProgram>)
  | ({
      instructionType: EffectMigrationInstruction.DestroyClaim;
    } & ParsedDestroyClaimInstruction<TProgram>);
