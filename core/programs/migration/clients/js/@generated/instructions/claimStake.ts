/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { EFFECT_MIGRATION_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_STAKE_DISCRIMINATOR = new Uint8Array([
  62, 145, 133, 242, 244, 59, 53, 139,
]);

export function getClaimStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLAIM_STAKE_DISCRIMINATOR);
}

export type ClaimStakeInstruction<
  TProgram extends string = typeof EFFECT_MIGRATION_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountRecipientTokenAccount extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountMigrationAccount extends string | AccountMeta<string> = string,
  TAccountMigrationVaultTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountStakeVaultTokenAccount extends string | AccountMeta<string> = string,
  TAccountRentReceiver extends
    | string
    | AccountMeta<string> = 'authGiAp86YEPGjqpKNxAMHxqcgvjmBfQkqqvhf7yMV',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountMigrationProgram extends
    | string
    | AccountMeta<string> = 'effM4rzQbgZD8J5wkubJbSVxTgRFWtatQcQEgYuwqrR',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountStakingProgram extends
    | string
    | AccountMeta<string> = 'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountRecipientTokenAccount extends string
        ? WritableAccount<TAccountRecipientTokenAccount>
        : TAccountRecipientTokenAccount,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountMigrationAccount extends string
        ? WritableAccount<TAccountMigrationAccount>
        : TAccountMigrationAccount,
      TAccountMigrationVaultTokenAccount extends string
        ? WritableAccount<TAccountMigrationVaultTokenAccount>
        : TAccountMigrationVaultTokenAccount,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountStakeVaultTokenAccount extends string
        ? WritableAccount<TAccountStakeVaultTokenAccount>
        : TAccountStakeVaultTokenAccount,
      TAccountRentReceiver extends string
        ? WritableAccount<TAccountRentReceiver>
        : TAccountRentReceiver,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountMigrationProgram extends string
        ? ReadonlyAccount<TAccountMigrationProgram>
        : TAccountMigrationProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakingProgram extends string
        ? ReadonlyAccount<TAccountStakingProgram>
        : TAccountStakingProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimStakeInstructionData = {
  discriminator: ReadonlyUint8Array;
  signature: ReadonlyUint8Array;
  message: ReadonlyUint8Array;
};

export type ClaimStakeInstructionDataArgs = {
  signature: ReadonlyUint8Array;
  message: ReadonlyUint8Array;
};

export function getClaimStakeInstructionDataEncoder(): Encoder<ClaimStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['signature', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ['message', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_STAKE_DISCRIMINATOR })
  );
}

export function getClaimStakeInstructionDataDecoder(): Decoder<ClaimStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['signature', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['message', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getClaimStakeInstructionDataCodec(): Codec<
  ClaimStakeInstructionDataArgs,
  ClaimStakeInstructionData
> {
  return combineCodec(
    getClaimStakeInstructionDataEncoder(),
    getClaimStakeInstructionDataDecoder()
  );
}

export type ClaimStakeAsyncInput<
  TAccountAuthority extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountMint extends string = string,
  TAccountMigrationAccount extends string = string,
  TAccountMigrationVaultTokenAccount extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountStakeVaultTokenAccount extends string = string,
  TAccountRentReceiver extends string = string,
  TAccountRent extends string = string,
  TAccountMigrationProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakingProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  mint: Address<TAccountMint>;
  migrationAccount: Address<TAccountMigrationAccount>;
  migrationVaultTokenAccount?: Address<TAccountMigrationVaultTokenAccount>;
  stakeAccount: Address<TAccountStakeAccount>;
  stakeVaultTokenAccount?: Address<TAccountStakeVaultTokenAccount>;
  rentReceiver?: Address<TAccountRentReceiver>;
  rent?: Address<TAccountRent>;
  migrationProgram?: Address<TAccountMigrationProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakingProgram?: Address<TAccountStakingProgram>;
  signature: ClaimStakeInstructionDataArgs['signature'];
  message: ClaimStakeInstructionDataArgs['message'];
};

export async function getClaimStakeInstructionAsync<
  TAccountAuthority extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountMint extends string,
  TAccountMigrationAccount extends string,
  TAccountMigrationVaultTokenAccount extends string,
  TAccountStakeAccount extends string,
  TAccountStakeVaultTokenAccount extends string,
  TAccountRentReceiver extends string,
  TAccountRent extends string,
  TAccountMigrationProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountStakingProgram extends string,
  TProgramAddress extends Address = typeof EFFECT_MIGRATION_PROGRAM_ADDRESS,
>(
  input: ClaimStakeAsyncInput<
    TAccountAuthority,
    TAccountRecipientTokenAccount,
    TAccountMint,
    TAccountMigrationAccount,
    TAccountMigrationVaultTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountRentReceiver,
    TAccountRent,
    TAccountMigrationProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountStakingProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimStakeInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountRecipientTokenAccount,
    TAccountMint,
    TAccountMigrationAccount,
    TAccountMigrationVaultTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountRentReceiver,
    TAccountRent,
    TAccountMigrationProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountStakingProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_MIGRATION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: true },
    migrationAccount: {
      value: input.migrationAccount ?? null,
      isWritable: true,
    },
    migrationVaultTokenAccount: {
      value: input.migrationVaultTokenAccount ?? null,
      isWritable: true,
    },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    stakeVaultTokenAccount: {
      value: input.stakeVaultTokenAccount ?? null,
      isWritable: true,
    },
    rentReceiver: { value: input.rentReceiver ?? null, isWritable: true },
    rent: { value: input.rent ?? null, isWritable: false },
    migrationProgram: {
      value: input.migrationProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakingProgram: { value: input.stakingProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.migrationVaultTokenAccount.value) {
    accounts.migrationVaultTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.migrationAccount.value)
        ),
      ],
    });
  }
  if (!accounts.stakeVaultTokenAccount.value) {
    accounts.stakeVaultTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e' as Address<'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakeAccount.value)),
      ],
    });
  }
  if (!accounts.rentReceiver.value) {
    accounts.rentReceiver.value =
      'authGiAp86YEPGjqpKNxAMHxqcgvjmBfQkqqvhf7yMV' as Address<'authGiAp86YEPGjqpKNxAMHxqcgvjmBfQkqqvhf7yMV'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.migrationProgram.value) {
    accounts.migrationProgram.value =
      'effM4rzQbgZD8J5wkubJbSVxTgRFWtatQcQEgYuwqrR' as Address<'effM4rzQbgZD8J5wkubJbSVxTgRFWtatQcQEgYuwqrR'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.stakingProgram.value) {
    accounts.stakingProgram.value =
      'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e' as Address<'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.migrationAccount),
      getAccountMeta(accounts.migrationVaultTokenAccount),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.stakeVaultTokenAccount),
      getAccountMeta(accounts.rentReceiver),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.migrationProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakingProgram),
    ],
    data: getClaimStakeInstructionDataEncoder().encode(
      args as ClaimStakeInstructionDataArgs
    ),
    programAddress,
  } as ClaimStakeInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountRecipientTokenAccount,
    TAccountMint,
    TAccountMigrationAccount,
    TAccountMigrationVaultTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountRentReceiver,
    TAccountRent,
    TAccountMigrationProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountStakingProgram
  >);
}

export type ClaimStakeInput<
  TAccountAuthority extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountMint extends string = string,
  TAccountMigrationAccount extends string = string,
  TAccountMigrationVaultTokenAccount extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountStakeVaultTokenAccount extends string = string,
  TAccountRentReceiver extends string = string,
  TAccountRent extends string = string,
  TAccountMigrationProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakingProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  mint: Address<TAccountMint>;
  migrationAccount: Address<TAccountMigrationAccount>;
  migrationVaultTokenAccount: Address<TAccountMigrationVaultTokenAccount>;
  stakeAccount: Address<TAccountStakeAccount>;
  stakeVaultTokenAccount: Address<TAccountStakeVaultTokenAccount>;
  rentReceiver?: Address<TAccountRentReceiver>;
  rent?: Address<TAccountRent>;
  migrationProgram?: Address<TAccountMigrationProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakingProgram?: Address<TAccountStakingProgram>;
  signature: ClaimStakeInstructionDataArgs['signature'];
  message: ClaimStakeInstructionDataArgs['message'];
};

export function getClaimStakeInstruction<
  TAccountAuthority extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountMint extends string,
  TAccountMigrationAccount extends string,
  TAccountMigrationVaultTokenAccount extends string,
  TAccountStakeAccount extends string,
  TAccountStakeVaultTokenAccount extends string,
  TAccountRentReceiver extends string,
  TAccountRent extends string,
  TAccountMigrationProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountStakingProgram extends string,
  TProgramAddress extends Address = typeof EFFECT_MIGRATION_PROGRAM_ADDRESS,
>(
  input: ClaimStakeInput<
    TAccountAuthority,
    TAccountRecipientTokenAccount,
    TAccountMint,
    TAccountMigrationAccount,
    TAccountMigrationVaultTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountRentReceiver,
    TAccountRent,
    TAccountMigrationProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountStakingProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimStakeInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountRecipientTokenAccount,
  TAccountMint,
  TAccountMigrationAccount,
  TAccountMigrationVaultTokenAccount,
  TAccountStakeAccount,
  TAccountStakeVaultTokenAccount,
  TAccountRentReceiver,
  TAccountRent,
  TAccountMigrationProgram,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountStakingProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_MIGRATION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: true },
    migrationAccount: {
      value: input.migrationAccount ?? null,
      isWritable: true,
    },
    migrationVaultTokenAccount: {
      value: input.migrationVaultTokenAccount ?? null,
      isWritable: true,
    },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    stakeVaultTokenAccount: {
      value: input.stakeVaultTokenAccount ?? null,
      isWritable: true,
    },
    rentReceiver: { value: input.rentReceiver ?? null, isWritable: true },
    rent: { value: input.rent ?? null, isWritable: false },
    migrationProgram: {
      value: input.migrationProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakingProgram: { value: input.stakingProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.rentReceiver.value) {
    accounts.rentReceiver.value =
      'authGiAp86YEPGjqpKNxAMHxqcgvjmBfQkqqvhf7yMV' as Address<'authGiAp86YEPGjqpKNxAMHxqcgvjmBfQkqqvhf7yMV'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.migrationProgram.value) {
    accounts.migrationProgram.value =
      'effM4rzQbgZD8J5wkubJbSVxTgRFWtatQcQEgYuwqrR' as Address<'effM4rzQbgZD8J5wkubJbSVxTgRFWtatQcQEgYuwqrR'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.stakingProgram.value) {
    accounts.stakingProgram.value =
      'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e' as Address<'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.migrationAccount),
      getAccountMeta(accounts.migrationVaultTokenAccount),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.stakeVaultTokenAccount),
      getAccountMeta(accounts.rentReceiver),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.migrationProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakingProgram),
    ],
    data: getClaimStakeInstructionDataEncoder().encode(
      args as ClaimStakeInstructionDataArgs
    ),
    programAddress,
  } as ClaimStakeInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountRecipientTokenAccount,
    TAccountMint,
    TAccountMigrationAccount,
    TAccountMigrationVaultTokenAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountRentReceiver,
    TAccountRent,
    TAccountMigrationProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountStakingProgram
  >);
}

export type ParsedClaimStakeInstruction<
  TProgram extends string = typeof EFFECT_MIGRATION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    recipientTokenAccount: TAccountMetas[1];
    mint: TAccountMetas[2];
    migrationAccount: TAccountMetas[3];
    migrationVaultTokenAccount: TAccountMetas[4];
    stakeAccount: TAccountMetas[5];
    stakeVaultTokenAccount: TAccountMetas[6];
    rentReceiver: TAccountMetas[7];
    rent: TAccountMetas[8];
    migrationProgram: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
    stakingProgram: TAccountMetas[12];
  };
  data: ClaimStakeInstructionData;
};

export function parseClaimStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      recipientTokenAccount: getNextAccount(),
      mint: getNextAccount(),
      migrationAccount: getNextAccount(),
      migrationVaultTokenAccount: getNextAccount(),
      stakeAccount: getNextAccount(),
      stakeVaultTokenAccount: getNextAccount(),
      rentReceiver: getNextAccount(),
      rent: getNextAccount(),
      migrationProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      stakingProgram: getNextAccount(),
    },
    data: getClaimStakeInstructionDataDecoder().decode(instruction.data),
  };
}
