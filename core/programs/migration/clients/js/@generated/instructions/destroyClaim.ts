/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { EFFECT_MIGRATION_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const DESTROY_CLAIM_DISCRIMINATOR = new Uint8Array([
  223, 1, 238, 215, 51, 229, 149, 94,
]);

export function getDestroyClaimDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DESTROY_CLAIM_DISCRIMINATOR
  );
}

export type DestroyClaimInstruction<
  TProgram extends string = typeof EFFECT_MIGRATION_PROGRAM_ADDRESS,
  TAccountMigrationAccount extends string | AccountMeta<string> = string,
  TAccountClaimVaultTokenAccount extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountAuthority extends
    | string
    | AccountMeta<string> = 'authGiAp86YEPGjqpKNxAMHxqcgvjmBfQkqqvhf7yMV',
  TAccountUserTokenAccount extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMigrationAccount extends string
        ? WritableAccount<TAccountMigrationAccount>
        : TAccountMigrationAccount,
      TAccountClaimVaultTokenAccount extends string
        ? WritableAccount<TAccountClaimVaultTokenAccount>
        : TAccountClaimVaultTokenAccount,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountUserTokenAccount extends string
        ? WritableAccount<TAccountUserTokenAccount>
        : TAccountUserTokenAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type DestroyClaimInstructionData = { discriminator: ReadonlyUint8Array };

export type DestroyClaimInstructionDataArgs = {};

export function getDestroyClaimInstructionDataEncoder(): FixedSizeEncoder<DestroyClaimInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: DESTROY_CLAIM_DISCRIMINATOR })
  );
}

export function getDestroyClaimInstructionDataDecoder(): FixedSizeDecoder<DestroyClaimInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getDestroyClaimInstructionDataCodec(): FixedSizeCodec<
  DestroyClaimInstructionDataArgs,
  DestroyClaimInstructionData
> {
  return combineCodec(
    getDestroyClaimInstructionDataEncoder(),
    getDestroyClaimInstructionDataDecoder()
  );
}

export type DestroyClaimAsyncInput<
  TAccountMigrationAccount extends string = string,
  TAccountClaimVaultTokenAccount extends string = string,
  TAccountMint extends string = string,
  TAccountAuthority extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  migrationAccount: Address<TAccountMigrationAccount>;
  claimVaultTokenAccount?: Address<TAccountClaimVaultTokenAccount>;
  mint: Address<TAccountMint>;
  authority?: TransactionSigner<TAccountAuthority>;
  userTokenAccount: Address<TAccountUserTokenAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
};

export async function getDestroyClaimInstructionAsync<
  TAccountMigrationAccount extends string,
  TAccountClaimVaultTokenAccount extends string,
  TAccountMint extends string,
  TAccountAuthority extends string,
  TAccountUserTokenAccount extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof EFFECT_MIGRATION_PROGRAM_ADDRESS,
>(
  input: DestroyClaimAsyncInput<
    TAccountMigrationAccount,
    TAccountClaimVaultTokenAccount,
    TAccountMint,
    TAccountAuthority,
    TAccountUserTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DestroyClaimInstruction<
    TProgramAddress,
    TAccountMigrationAccount,
    TAccountClaimVaultTokenAccount,
    TAccountMint,
    TAccountAuthority,
    TAccountUserTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_MIGRATION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    migrationAccount: {
      value: input.migrationAccount ?? null,
      isWritable: true,
    },
    claimVaultTokenAccount: {
      value: input.claimVaultTokenAccount ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.claimVaultTokenAccount.value) {
    accounts.claimVaultTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.migrationAccount.value)
        ),
      ],
    });
  }
  if (!accounts.authority.value) {
    accounts.authority.value =
      'authGiAp86YEPGjqpKNxAMHxqcgvjmBfQkqqvhf7yMV' as Address<'authGiAp86YEPGjqpKNxAMHxqcgvjmBfQkqqvhf7yMV'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.migrationAccount),
      getAccountMeta(accounts.claimVaultTokenAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getDestroyClaimInstructionDataEncoder().encode({}),
    programAddress,
  } as DestroyClaimInstruction<
    TProgramAddress,
    TAccountMigrationAccount,
    TAccountClaimVaultTokenAccount,
    TAccountMint,
    TAccountAuthority,
    TAccountUserTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >);
}

export type DestroyClaimInput<
  TAccountMigrationAccount extends string = string,
  TAccountClaimVaultTokenAccount extends string = string,
  TAccountMint extends string = string,
  TAccountAuthority extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  migrationAccount: Address<TAccountMigrationAccount>;
  claimVaultTokenAccount: Address<TAccountClaimVaultTokenAccount>;
  mint: Address<TAccountMint>;
  authority?: TransactionSigner<TAccountAuthority>;
  userTokenAccount: Address<TAccountUserTokenAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
};

export function getDestroyClaimInstruction<
  TAccountMigrationAccount extends string,
  TAccountClaimVaultTokenAccount extends string,
  TAccountMint extends string,
  TAccountAuthority extends string,
  TAccountUserTokenAccount extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof EFFECT_MIGRATION_PROGRAM_ADDRESS,
>(
  input: DestroyClaimInput<
    TAccountMigrationAccount,
    TAccountClaimVaultTokenAccount,
    TAccountMint,
    TAccountAuthority,
    TAccountUserTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): DestroyClaimInstruction<
  TProgramAddress,
  TAccountMigrationAccount,
  TAccountClaimVaultTokenAccount,
  TAccountMint,
  TAccountAuthority,
  TAccountUserTokenAccount,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_MIGRATION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    migrationAccount: {
      value: input.migrationAccount ?? null,
      isWritable: true,
    },
    claimVaultTokenAccount: {
      value: input.claimVaultTokenAccount ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.authority.value) {
    accounts.authority.value =
      'authGiAp86YEPGjqpKNxAMHxqcgvjmBfQkqqvhf7yMV' as Address<'authGiAp86YEPGjqpKNxAMHxqcgvjmBfQkqqvhf7yMV'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.migrationAccount),
      getAccountMeta(accounts.claimVaultTokenAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getDestroyClaimInstructionDataEncoder().encode({}),
    programAddress,
  } as DestroyClaimInstruction<
    TProgramAddress,
    TAccountMigrationAccount,
    TAccountClaimVaultTokenAccount,
    TAccountMint,
    TAccountAuthority,
    TAccountUserTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >);
}

export type ParsedDestroyClaimInstruction<
  TProgram extends string = typeof EFFECT_MIGRATION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    migrationAccount: TAccountMetas[0];
    claimVaultTokenAccount: TAccountMetas[1];
    mint: TAccountMetas[2];
    authority: TAccountMetas[3];
    userTokenAccount: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    rent: TAccountMetas[7];
  };
  data: DestroyClaimInstructionData;
};

export function parseDestroyClaimInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDestroyClaimInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      migrationAccount: getNextAccount(),
      claimVaultTokenAccount: getNextAccount(),
      mint: getNextAccount(),
      authority: getNextAccount(),
      userTokenAccount: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getDestroyClaimInstructionDataDecoder().decode(instruction.data),
  };
}
