/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const REWARD_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  225, 81, 31, 253, 84, 234, 171, 129,
]);

export function getRewardAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REWARD_ACCOUNT_DISCRIMINATOR
  );
}

export type RewardAccount = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  reflection: bigint;
  weightedAmount: bigint;
};

export type RewardAccountArgs = {
  authority: Address;
  reflection: number | bigint;
  weightedAmount: number | bigint;
};

export function getRewardAccountEncoder(): FixedSizeEncoder<RewardAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['reflection', getU128Encoder()],
      ['weightedAmount', getU128Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REWARD_ACCOUNT_DISCRIMINATOR })
  );
}

export function getRewardAccountDecoder(): FixedSizeDecoder<RewardAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['reflection', getU128Decoder()],
    ['weightedAmount', getU128Decoder()],
  ]);
}

export function getRewardAccountCodec(): FixedSizeCodec<
  RewardAccountArgs,
  RewardAccount
> {
  return combineCodec(getRewardAccountEncoder(), getRewardAccountDecoder());
}

export function decodeRewardAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<RewardAccount, TAddress>;
export function decodeRewardAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<RewardAccount, TAddress>;
export function decodeRewardAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<RewardAccount, TAddress> | MaybeAccount<RewardAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRewardAccountDecoder()
  );
}

export async function fetchRewardAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<RewardAccount, TAddress>> {
  const maybeAccount = await fetchMaybeRewardAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRewardAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<RewardAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRewardAccount(maybeAccount);
}

export async function fetchAllRewardAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<RewardAccount>[]> {
  const maybeAccounts = await fetchAllMaybeRewardAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRewardAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<RewardAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRewardAccount(maybeAccount));
}

export function getRewardAccountSize(): number {
  return 72;
}
