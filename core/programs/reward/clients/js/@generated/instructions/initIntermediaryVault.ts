/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { EFFECT_REWARD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INIT_INTERMEDIARY_VAULT_DISCRIMINATOR = new Uint8Array([
  136, 233, 11, 94, 192, 117, 195, 255,
]);

export function getInitIntermediaryVaultDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_INTERMEDIARY_VAULT_DISCRIMINATOR
  );
}

export type InitIntermediaryVaultInstruction<
  TProgram extends string = typeof EFFECT_REWARD_PROGRAM_ADDRESS,
  TAccountReflectionAccount extends string | AccountMeta<string> = string,
  TAccountRewardVaultTokenAccount extends string | AccountMeta<string> = string,
  TAccountIntermediateRewardVaultTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountReflectionAccount extends string
        ? ReadonlyAccount<TAccountReflectionAccount>
        : TAccountReflectionAccount,
      TAccountRewardVaultTokenAccount extends string
        ? ReadonlyAccount<TAccountRewardVaultTokenAccount>
        : TAccountRewardVaultTokenAccount,
      TAccountIntermediateRewardVaultTokenAccount extends string
        ? WritableAccount<TAccountIntermediateRewardVaultTokenAccount>
        : TAccountIntermediateRewardVaultTokenAccount,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type InitIntermediaryVaultInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitIntermediaryVaultInstructionDataArgs = {};

export function getInitIntermediaryVaultInstructionDataEncoder(): FixedSizeEncoder<InitIntermediaryVaultInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INIT_INTERMEDIARY_VAULT_DISCRIMINATOR,
    })
  );
}

export function getInitIntermediaryVaultInstructionDataDecoder(): FixedSizeDecoder<InitIntermediaryVaultInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitIntermediaryVaultInstructionDataCodec(): FixedSizeCodec<
  InitIntermediaryVaultInstructionDataArgs,
  InitIntermediaryVaultInstructionData
> {
  return combineCodec(
    getInitIntermediaryVaultInstructionDataEncoder(),
    getInitIntermediaryVaultInstructionDataDecoder()
  );
}

export type InitIntermediaryVaultAsyncInput<
  TAccountReflectionAccount extends string = string,
  TAccountRewardVaultTokenAccount extends string = string,
  TAccountIntermediateRewardVaultTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  reflectionAccount?: Address<TAccountReflectionAccount>;
  rewardVaultTokenAccount?: Address<TAccountRewardVaultTokenAccount>;
  intermediateRewardVaultTokenAccount?: Address<TAccountIntermediateRewardVaultTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  mint: Address<TAccountMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
};

export async function getInitIntermediaryVaultInstructionAsync<
  TAccountReflectionAccount extends string,
  TAccountRewardVaultTokenAccount extends string,
  TAccountIntermediateRewardVaultTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof EFFECT_REWARD_PROGRAM_ADDRESS,
>(
  input: InitIntermediaryVaultAsyncInput<
    TAccountReflectionAccount,
    TAccountRewardVaultTokenAccount,
    TAccountIntermediateRewardVaultTokenAccount,
    TAccountAuthority,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitIntermediaryVaultInstruction<
    TProgramAddress,
    TAccountReflectionAccount,
    TAccountRewardVaultTokenAccount,
    TAccountIntermediateRewardVaultTokenAccount,
    TAccountAuthority,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_REWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    reflectionAccount: {
      value: input.reflectionAccount ?? null,
      isWritable: false,
    },
    rewardVaultTokenAccount: {
      value: input.rewardVaultTokenAccount ?? null,
      isWritable: false,
    },
    intermediateRewardVaultTokenAccount: {
      value: input.intermediateRewardVaultTokenAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.reflectionAccount.value) {
    accounts.reflectionAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([114, 101, 102, 108, 101, 99, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.rewardVaultTokenAccount.value) {
    accounts.rewardVaultTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.reflectionAccount.value)
        ),
      ],
    });
  }
  if (!accounts.intermediateRewardVaultTokenAccount.value) {
    accounts.intermediateRewardVaultTokenAccount.value =
      await getProgramDerivedAddress({
        programAddress,
        seeds: [
          getAddressEncoder().encode(
            expectAddress(accounts.rewardVaultTokenAccount.value)
          ),
        ],
      });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.reflectionAccount),
      getAccountMeta(accounts.rewardVaultTokenAccount),
      getAccountMeta(accounts.intermediateRewardVaultTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitIntermediaryVaultInstructionDataEncoder().encode({}),
    programAddress,
  } as InitIntermediaryVaultInstruction<
    TProgramAddress,
    TAccountReflectionAccount,
    TAccountRewardVaultTokenAccount,
    TAccountIntermediateRewardVaultTokenAccount,
    TAccountAuthority,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >);
}

export type InitIntermediaryVaultInput<
  TAccountReflectionAccount extends string = string,
  TAccountRewardVaultTokenAccount extends string = string,
  TAccountIntermediateRewardVaultTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  reflectionAccount: Address<TAccountReflectionAccount>;
  rewardVaultTokenAccount: Address<TAccountRewardVaultTokenAccount>;
  intermediateRewardVaultTokenAccount: Address<TAccountIntermediateRewardVaultTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  mint: Address<TAccountMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
};

export function getInitIntermediaryVaultInstruction<
  TAccountReflectionAccount extends string,
  TAccountRewardVaultTokenAccount extends string,
  TAccountIntermediateRewardVaultTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof EFFECT_REWARD_PROGRAM_ADDRESS,
>(
  input: InitIntermediaryVaultInput<
    TAccountReflectionAccount,
    TAccountRewardVaultTokenAccount,
    TAccountIntermediateRewardVaultTokenAccount,
    TAccountAuthority,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): InitIntermediaryVaultInstruction<
  TProgramAddress,
  TAccountReflectionAccount,
  TAccountRewardVaultTokenAccount,
  TAccountIntermediateRewardVaultTokenAccount,
  TAccountAuthority,
  TAccountMint,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_REWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    reflectionAccount: {
      value: input.reflectionAccount ?? null,
      isWritable: false,
    },
    rewardVaultTokenAccount: {
      value: input.rewardVaultTokenAccount ?? null,
      isWritable: false,
    },
    intermediateRewardVaultTokenAccount: {
      value: input.intermediateRewardVaultTokenAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.reflectionAccount),
      getAccountMeta(accounts.rewardVaultTokenAccount),
      getAccountMeta(accounts.intermediateRewardVaultTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitIntermediaryVaultInstructionDataEncoder().encode({}),
    programAddress,
  } as InitIntermediaryVaultInstruction<
    TProgramAddress,
    TAccountReflectionAccount,
    TAccountRewardVaultTokenAccount,
    TAccountIntermediateRewardVaultTokenAccount,
    TAccountAuthority,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >);
}

export type ParsedInitIntermediaryVaultInstruction<
  TProgram extends string = typeof EFFECT_REWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    reflectionAccount: TAccountMetas[0];
    rewardVaultTokenAccount: TAccountMetas[1];
    intermediateRewardVaultTokenAccount: TAccountMetas[2];
    authority: TAccountMetas[3];
    mint: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    rent: TAccountMetas[7];
  };
  data: InitIntermediaryVaultInstructionData;
};

export function parseInitIntermediaryVaultInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitIntermediaryVaultInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      reflectionAccount: getNextAccount(),
      rewardVaultTokenAccount: getNextAccount(),
      intermediateRewardVaultTokenAccount: getNextAccount(),
      authority: getNextAccount(),
      mint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInitIntermediaryVaultInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
