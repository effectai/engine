/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { EFFECT_REWARD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLOSE_DISCRIMINATOR = new Uint8Array([
  98, 165, 201, 177, 108, 65, 206, 96,
]);

export function getCloseDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLOSE_DISCRIMINATOR);
}

export type CloseInstruction<
  TProgram extends string = typeof EFFECT_REWARD_PROGRAM_ADDRESS,
  TAccountReflectionAccount extends string | AccountMeta<string> = string,
  TAccountRewardAccount extends string | AccountMeta<string> = string,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountStakeVaultTokenAccount extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountStakeProgram extends
    | string
    | AccountMeta<string> = 'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountReflectionAccount extends string
        ? WritableAccount<TAccountReflectionAccount>
        : TAccountReflectionAccount,
      TAccountRewardAccount extends string
        ? WritableAccount<TAccountRewardAccount>
        : TAccountRewardAccount,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountStakeVaultTokenAccount extends string
        ? WritableAccount<TAccountStakeVaultTokenAccount>
        : TAccountStakeVaultTokenAccount,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseInstructionData = { discriminator: ReadonlyUint8Array };

export type CloseInstructionDataArgs = {};

export function getCloseInstructionDataEncoder(): FixedSizeEncoder<CloseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_DISCRIMINATOR })
  );
}

export function getCloseInstructionDataDecoder(): FixedSizeDecoder<CloseInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseInstructionDataCodec(): FixedSizeCodec<
  CloseInstructionDataArgs,
  CloseInstructionData
> {
  return combineCodec(
    getCloseInstructionDataEncoder(),
    getCloseInstructionDataDecoder()
  );
}

export type CloseAsyncInput<
  TAccountReflectionAccount extends string = string,
  TAccountRewardAccount extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountStakeVaultTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountStakeProgram extends string = string,
> = {
  reflectionAccount: Address<TAccountReflectionAccount>;
  rewardAccount?: Address<TAccountRewardAccount>;
  stakeAccount: Address<TAccountStakeAccount>;
  stakeVaultTokenAccount?: Address<TAccountStakeVaultTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  stakeProgram?: Address<TAccountStakeProgram>;
};

export async function getCloseInstructionAsync<
  TAccountReflectionAccount extends string,
  TAccountRewardAccount extends string,
  TAccountStakeAccount extends string,
  TAccountStakeVaultTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof EFFECT_REWARD_PROGRAM_ADDRESS,
>(
  input: CloseAsyncInput<
    TAccountReflectionAccount,
    TAccountRewardAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountAuthority,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CloseInstruction<
    TProgramAddress,
    TAccountReflectionAccount,
    TAccountRewardAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountAuthority,
    TAccountStakeProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_REWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    reflectionAccount: {
      value: input.reflectionAccount ?? null,
      isWritable: true,
    },
    rewardAccount: { value: input.rewardAccount ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    stakeVaultTokenAccount: {
      value: input.stakeVaultTokenAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.rewardAccount.value) {
    accounts.rewardAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakeAccount.value)),
      ],
    });
  }
  if (!accounts.stakeVaultTokenAccount.value) {
    accounts.stakeVaultTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e' as Address<'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakeAccount.value)),
      ],
    });
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e' as Address<'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.reflectionAccount),
      getAccountMeta(accounts.rewardAccount),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.stakeVaultTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getCloseInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseInstruction<
    TProgramAddress,
    TAccountReflectionAccount,
    TAccountRewardAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountAuthority,
    TAccountStakeProgram
  >);
}

export type CloseInput<
  TAccountReflectionAccount extends string = string,
  TAccountRewardAccount extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountStakeVaultTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountStakeProgram extends string = string,
> = {
  reflectionAccount: Address<TAccountReflectionAccount>;
  rewardAccount: Address<TAccountRewardAccount>;
  stakeAccount: Address<TAccountStakeAccount>;
  stakeVaultTokenAccount: Address<TAccountStakeVaultTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  stakeProgram?: Address<TAccountStakeProgram>;
};

export function getCloseInstruction<
  TAccountReflectionAccount extends string,
  TAccountRewardAccount extends string,
  TAccountStakeAccount extends string,
  TAccountStakeVaultTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof EFFECT_REWARD_PROGRAM_ADDRESS,
>(
  input: CloseInput<
    TAccountReflectionAccount,
    TAccountRewardAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountAuthority,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CloseInstruction<
  TProgramAddress,
  TAccountReflectionAccount,
  TAccountRewardAccount,
  TAccountStakeAccount,
  TAccountStakeVaultTokenAccount,
  TAccountAuthority,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? EFFECT_REWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    reflectionAccount: {
      value: input.reflectionAccount ?? null,
      isWritable: true,
    },
    rewardAccount: { value: input.rewardAccount ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    stakeVaultTokenAccount: {
      value: input.stakeVaultTokenAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e' as Address<'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.reflectionAccount),
      getAccountMeta(accounts.rewardAccount),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.stakeVaultTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getCloseInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseInstruction<
    TProgramAddress,
    TAccountReflectionAccount,
    TAccountRewardAccount,
    TAccountStakeAccount,
    TAccountStakeVaultTokenAccount,
    TAccountAuthority,
    TAccountStakeProgram
  >);
}

export type ParsedCloseInstruction<
  TProgram extends string = typeof EFFECT_REWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    reflectionAccount: TAccountMetas[0];
    rewardAccount: TAccountMetas[1];
    stakeAccount: TAccountMetas[2];
    stakeVaultTokenAccount: TAccountMetas[3];
    authority: TAccountMetas[4];
    stakeProgram: TAccountMetas[5];
  };
  data: CloseInstructionData;
};

export function parseCloseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      reflectionAccount: getNextAccount(),
      rewardAccount: getNextAccount(),
      stakeAccount: getNextAccount(),
      stakeVaultTokenAccount: getNextAccount(),
      authority: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getCloseInstructionDataDecoder().decode(instruction.data),
  };
}
