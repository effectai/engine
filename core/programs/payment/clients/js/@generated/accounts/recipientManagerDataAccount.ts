/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const RECIPIENT_MANAGER_DATA_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  61, 41, 126, 131, 94, 55, 133, 237,
]);

export function getRecipientManagerDataAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RECIPIENT_MANAGER_DATA_ACCOUNT_DISCRIMINATOR
  );
}

export type RecipientManagerDataAccount = {
  discriminator: ReadonlyUint8Array;
  nonce: number;
};

export type RecipientManagerDataAccountArgs = { nonce: number };

export function getRecipientManagerDataAccountEncoder(): FixedSizeEncoder<RecipientManagerDataAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['nonce', getU32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: RECIPIENT_MANAGER_DATA_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getRecipientManagerDataAccountDecoder(): FixedSizeDecoder<RecipientManagerDataAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['nonce', getU32Decoder()],
  ]);
}

export function getRecipientManagerDataAccountCodec(): FixedSizeCodec<
  RecipientManagerDataAccountArgs,
  RecipientManagerDataAccount
> {
  return combineCodec(
    getRecipientManagerDataAccountEncoder(),
    getRecipientManagerDataAccountDecoder()
  );
}

export function decodeRecipientManagerDataAccount<
  TAddress extends string = string,
>(
  encodedAccount: EncodedAccount<TAddress>
): Account<RecipientManagerDataAccount, TAddress>;
export function decodeRecipientManagerDataAccount<
  TAddress extends string = string,
>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<RecipientManagerDataAccount, TAddress>;
export function decodeRecipientManagerDataAccount<
  TAddress extends string = string,
>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<RecipientManagerDataAccount, TAddress>
  | MaybeAccount<RecipientManagerDataAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRecipientManagerDataAccountDecoder()
  );
}

export async function fetchRecipientManagerDataAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<RecipientManagerDataAccount, TAddress>> {
  const maybeAccount = await fetchMaybeRecipientManagerDataAccount(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRecipientManagerDataAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<RecipientManagerDataAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRecipientManagerDataAccount(maybeAccount);
}

export async function fetchAllRecipientManagerDataAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<RecipientManagerDataAccount>[]> {
  const maybeAccounts = await fetchAllMaybeRecipientManagerDataAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRecipientManagerDataAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<RecipientManagerDataAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeRecipientManagerDataAccount(maybeAccount)
  );
}

export function getRecipientManagerDataAccountSize(): number {
  return 12;
}
