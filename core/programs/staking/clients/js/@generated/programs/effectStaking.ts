/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCloseInstruction,
  type ParsedStakeGenesisInstruction,
  type ParsedStakeInstruction,
  type ParsedTopupInstruction,
  type ParsedUnstakeInstruction,
} from '../instructions';

export const EFFECT_STAKING_PROGRAM_ADDRESS =
  'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e' as Address<'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e'>;

export enum EffectStakingAccount {
  MigrationAccount,
  StakeAccount,
}

export function identifyEffectStakingAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EffectStakingAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 168, 118, 35, 238, 212, 16, 172])
      ),
      0
    )
  ) {
    return EffectStakingAccount.MigrationAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 158, 67, 124, 50, 189, 192, 255])
      ),
      0
    )
  ) {
    return EffectStakingAccount.StakeAccount;
  }
  throw new Error(
    'The provided account could not be identified as a effectStaking account.'
  );
}

export enum EffectStakingInstruction {
  Close,
  Stake,
  StakeGenesis,
  Topup,
  Unstake,
}

export function identifyEffectStakingInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EffectStakingInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([98, 165, 201, 177, 108, 65, 206, 96])
      ),
      0
    )
  ) {
    return EffectStakingInstruction.Close;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([206, 176, 202, 18, 200, 209, 179, 108])
      ),
      0
    )
  ) {
    return EffectStakingInstruction.Stake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([254, 31, 23, 18, 216, 245, 224, 83])
      ),
      0
    )
  ) {
    return EffectStakingInstruction.StakeGenesis;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([126, 42, 49, 78, 225, 151, 99, 77])
      ),
      0
    )
  ) {
    return EffectStakingInstruction.Topup;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([90, 95, 107, 42, 205, 124, 50, 225])
      ),
      0
    )
  ) {
    return EffectStakingInstruction.Unstake;
  }
  throw new Error(
    'The provided instruction could not be identified as a effectStaking instruction.'
  );
}

export type ParsedEffectStakingInstruction<
  TProgram extends string = 'effSujUiy4eT2vrMqSsUkb6oT3C7pC42UnWSukRpu5e',
> =
  | ({
      instructionType: EffectStakingInstruction.Close;
    } & ParsedCloseInstruction<TProgram>)
  | ({
      instructionType: EffectStakingInstruction.Stake;
    } & ParsedStakeInstruction<TProgram>)
  | ({
      instructionType: EffectStakingInstruction.StakeGenesis;
    } & ParsedStakeGenesisInstruction<TProgram>)
  | ({
      instructionType: EffectStakingInstruction.Topup;
    } & ParsedTopupInstruction<TProgram>)
  | ({
      instructionType: EffectStakingInstruction.Unstake;
    } & ParsedUnstakeInstruction<TProgram>);
