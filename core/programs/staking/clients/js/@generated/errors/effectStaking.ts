/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { EFFECT_STAKING_PROGRAM_ADDRESS } from '../programs';

/** InvalidVault: This account has an invalid vault. */
export const EFFECT_STAKING_ERROR__INVALID_VAULT = 0x1770; // 6000
/** Unauthorized: This account is not authorized to perform this action. */
export const EFFECT_STAKING_ERROR__UNAUTHORIZED = 0x1771; // 6001
/** AlreadyUnstaked: This stake is already unstaked. */
export const EFFECT_STAKING_ERROR__ALREADY_UNSTAKED = 0x1772; // 6002
/** Decreased: This stake is not allowed to decrease. */
export const EFFECT_STAKING_ERROR__DECREASED = 0x1773; // 6003
/** NotUnstaked: This stake is not yet unstaked. */
export const EFFECT_STAKING_ERROR__NOT_UNSTAKED = 0x1774; // 6004
/** Locked: This stake is still locked. */
export const EFFECT_STAKING_ERROR__LOCKED = 0x1775; // 6005
/** VaultNotEmpty: This vault is not empty. */
export const EFFECT_STAKING_ERROR__VAULT_NOT_EMPTY = 0x1776; // 6006
/** DurationTooLong: The stake duration is too long. */
export const EFFECT_STAKING_ERROR__DURATION_TOO_LONG = 0x1777; // 6007
/** DurationTooShort: The stake duration is too short. */
export const EFFECT_STAKING_ERROR__DURATION_TOO_SHORT = 0x1778; // 6008
/** VaultAuthorityMismatch: The vault authority does not match. */
export const EFFECT_STAKING_ERROR__VAULT_AUTHORITY_MISMATCH = 0x1779; // 6009
/** AmountNotEnough: The stake amount is not enough. */
export const EFFECT_STAKING_ERROR__AMOUNT_NOT_ENOUGH = 0x177a; // 6010
/** AlreadyStaked: This stake is already staked. */
export const EFFECT_STAKING_ERROR__ALREADY_STAKED = 0x177b; // 6011
/** InvalidRewardAccount: Invalid reward account. */
export const EFFECT_STAKING_ERROR__INVALID_REWARD_ACCOUNT = 0x177c; // 6012
/** InvalidStakeAccount: Invalid stake account. */
export const EFFECT_STAKING_ERROR__INVALID_STAKE_ACCOUNT = 0x177d; // 6013
/** InvalidVestingAccount: Invalid vesting account. */
export const EFFECT_STAKING_ERROR__INVALID_VESTING_ACCOUNT = 0x177e; // 6014
/** StakeNotEmpty: Stake acount is not empty. */
export const EFFECT_STAKING_ERROR__STAKE_NOT_EMPTY = 0x177f; // 6015
/** InvalidMint: Invalid Mint */
export const EFFECT_STAKING_ERROR__INVALID_MINT = 0x1780; // 6016

export type EffectStakingError =
  | typeof EFFECT_STAKING_ERROR__ALREADY_STAKED
  | typeof EFFECT_STAKING_ERROR__ALREADY_UNSTAKED
  | typeof EFFECT_STAKING_ERROR__AMOUNT_NOT_ENOUGH
  | typeof EFFECT_STAKING_ERROR__DECREASED
  | typeof EFFECT_STAKING_ERROR__DURATION_TOO_LONG
  | typeof EFFECT_STAKING_ERROR__DURATION_TOO_SHORT
  | typeof EFFECT_STAKING_ERROR__INVALID_MINT
  | typeof EFFECT_STAKING_ERROR__INVALID_REWARD_ACCOUNT
  | typeof EFFECT_STAKING_ERROR__INVALID_STAKE_ACCOUNT
  | typeof EFFECT_STAKING_ERROR__INVALID_VAULT
  | typeof EFFECT_STAKING_ERROR__INVALID_VESTING_ACCOUNT
  | typeof EFFECT_STAKING_ERROR__LOCKED
  | typeof EFFECT_STAKING_ERROR__NOT_UNSTAKED
  | typeof EFFECT_STAKING_ERROR__STAKE_NOT_EMPTY
  | typeof EFFECT_STAKING_ERROR__UNAUTHORIZED
  | typeof EFFECT_STAKING_ERROR__VAULT_AUTHORITY_MISMATCH
  | typeof EFFECT_STAKING_ERROR__VAULT_NOT_EMPTY;

let effectStakingErrorMessages: Record<EffectStakingError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  effectStakingErrorMessages = {
    [EFFECT_STAKING_ERROR__ALREADY_STAKED]: `This stake is already staked.`,
    [EFFECT_STAKING_ERROR__ALREADY_UNSTAKED]: `This stake is already unstaked.`,
    [EFFECT_STAKING_ERROR__AMOUNT_NOT_ENOUGH]: `The stake amount is not enough.`,
    [EFFECT_STAKING_ERROR__DECREASED]: `This stake is not allowed to decrease.`,
    [EFFECT_STAKING_ERROR__DURATION_TOO_LONG]: `The stake duration is too long.`,
    [EFFECT_STAKING_ERROR__DURATION_TOO_SHORT]: `The stake duration is too short.`,
    [EFFECT_STAKING_ERROR__INVALID_MINT]: `Invalid Mint`,
    [EFFECT_STAKING_ERROR__INVALID_REWARD_ACCOUNT]: `Invalid reward account.`,
    [EFFECT_STAKING_ERROR__INVALID_STAKE_ACCOUNT]: `Invalid stake account.`,
    [EFFECT_STAKING_ERROR__INVALID_VAULT]: `This account has an invalid vault.`,
    [EFFECT_STAKING_ERROR__INVALID_VESTING_ACCOUNT]: `Invalid vesting account.`,
    [EFFECT_STAKING_ERROR__LOCKED]: `This stake is still locked.`,
    [EFFECT_STAKING_ERROR__NOT_UNSTAKED]: `This stake is not yet unstaked.`,
    [EFFECT_STAKING_ERROR__STAKE_NOT_EMPTY]: `Stake acount is not empty.`,
    [EFFECT_STAKING_ERROR__UNAUTHORIZED]: `This account is not authorized to perform this action.`,
    [EFFECT_STAKING_ERROR__VAULT_AUTHORITY_MISMATCH]: `The vault authority does not match.`,
    [EFFECT_STAKING_ERROR__VAULT_NOT_EMPTY]: `This vault is not empty.`,
  };
}

export function getEffectStakingErrorMessage(code: EffectStakingError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (effectStakingErrorMessages as Record<EffectStakingError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isEffectStakingError<
  TProgramErrorCode extends EffectStakingError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    EFFECT_STAKING_PROGRAM_ADDRESS,
    code
  );
}
