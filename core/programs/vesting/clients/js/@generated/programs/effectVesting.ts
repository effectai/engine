/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedClaimInstruction,
  type ParsedCloseInstruction,
  type ParsedOpenInstruction,
  type ParsedUpdateRecipientInstruction,
} from '../instructions';

export const EFFECT_VESTING_PROGRAM_ADDRESS =
  'effV6X5UGwHDjVxAMW1KjC4SsuEQT3dTkm8PQTMGV7S' as Address<'effV6X5UGwHDjVxAMW1KjC4SsuEQT3dTkm8PQTMGV7S'>;

export enum EffectVestingAccount {
  VestingAccount,
}

export function identifyEffectVestingAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EffectVestingAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([102, 73, 10, 233, 200, 188, 228, 216])
      ),
      0
    )
  ) {
    return EffectVestingAccount.VestingAccount;
  }
  throw new Error(
    'The provided account could not be identified as a effectVesting account.'
  );
}

export enum EffectVestingInstruction {
  Claim,
  Close,
  Open,
  UpdateRecipient,
}

export function identifyEffectVestingInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EffectVestingInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([62, 198, 214, 193, 213, 159, 108, 210])
      ),
      0
    )
  ) {
    return EffectVestingInstruction.Claim;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([98, 165, 201, 177, 108, 65, 206, 96])
      ),
      0
    )
  ) {
    return EffectVestingInstruction.Close;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([228, 220, 155, 71, 199, 189, 60, 45])
      ),
      0
    )
  ) {
    return EffectVestingInstruction.Open;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([55, 190, 61, 121, 131, 132, 8, 54])
      ),
      0
    )
  ) {
    return EffectVestingInstruction.UpdateRecipient;
  }
  throw new Error(
    'The provided instruction could not be identified as a effectVesting instruction.'
  );
}

export type ParsedEffectVestingInstruction<
  TProgram extends string = 'effV6X5UGwHDjVxAMW1KjC4SsuEQT3dTkm8PQTMGV7S',
> =
  | ({
      instructionType: EffectVestingInstruction.Claim;
    } & ParsedClaimInstruction<TProgram>)
  | ({
      instructionType: EffectVestingInstruction.Close;
    } & ParsedCloseInstruction<TProgram>)
  | ({
      instructionType: EffectVestingInstruction.Open;
    } & ParsedOpenInstruction<TProgram>)
  | ({
      instructionType: EffectVestingInstruction.UpdateRecipient;
    } & ParsedUpdateRecipientInstruction<TProgram>);
